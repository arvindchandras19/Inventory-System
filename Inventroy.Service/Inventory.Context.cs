//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventroy.Service
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryEntities : DbContext
    {
        public InventoryEntities()
            : base("name=InventoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<IUserRole> IUserRoles { get; set; }
        public virtual DbSet<InvenKeyValue> InvenKeyValues { get; set; }
        public virtual DbSet<InventoryDictionary> InventoryDictionaries { get; set; }
        public virtual DbSet<UserFacilityRole> UserFacilityRoles { get; set; }
        public virtual DbSet<ItemMapping> ItemMappings { get; set; }
        public virtual DbSet<UomMaster> UomMasters { get; set; }
        public virtual DbSet<PageMaster> PageMasters { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CorporateMaster> CorporateMasters { get; set; }
        public virtual DbSet<GPBillingMaster> GPBillingMasters { get; set; }
        public virtual DbSet<FacilityItemMap> FacilityItemMaps { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorOrderDue> VendorOrderDues { get; set; }
        public virtual DbSet<FacilitySupply> FacilitySupplies { get; set; }
        public virtual DbSet<Machinemaster> Machinemasters { get; set; }
        public virtual DbSet<MachinePartsRequestDetail> MachinePartsRequestDetails { get; set; }
        public virtual DbSet<MachinePartsRequestMaster> MachinePartsRequestMasters { get; set; }
        public virtual DbSet<FacilityVendorAccount> FacilityVendorAccounts { get; set; }
        public virtual DbSet<ServiceCategoryMaster> ServiceCategoryMasters { get; set; }
        public virtual DbSet<ServiceListMaster> ServiceListMasters { get; set; }
        public virtual DbSet<ServiceRequestMaster> ServiceRequestMasters { get; set; }
        public virtual DbSet<EquipementCategoryMaster> EquipementCategoryMasters { get; set; }
        public virtual DbSet<MedicalSuppliesRequestMaster> MedicalSuppliesRequestMasters { get; set; }
        public virtual DbSet<MedicalSuppliesRequestDetail> MedicalSuppliesRequestDetails { get; set; }
        public virtual DbSet<EquipementSubCategoryMaster> EquipementSubCategoryMasters { get; set; }
        public virtual DbSet<ITRequestDetail> ITRequestDetails { get; set; }
        public virtual DbSet<ITRequestMaster> ITRequestMasters { get; set; }
        public virtual DbSet<CapitalItemRequestDetail> CapitalItemRequestDetails { get; set; }
        public virtual DbSet<CapitalItemRequestMaster> CapitalItemRequestMasters { get; set; }
        public virtual DbSet<EquipementListMaster> EquipementListMasters { get; set; }
        public virtual DbSet<PageMasterPermission> PageMasterPermissions { get; set; }
        public virtual DbSet<MachinePartsRequestOrder> MachinePartsRequestOrders { get; set; }
        public virtual DbSet<EquipementListMaster_TEMP> EquipementListMaster_TEMP { get; set; }
        public virtual DbSet<MedicalSuppliesRequestOrder> MedicalSuppliesRequestOrders { get; set; }
        public virtual DbSet<CapitalItemOrder> CapitalItemOrders { get; set; }
        public virtual DbSet<CapitalItemApprove> CapitalItemApproves { get; set; }
        public virtual DbSet<ITRequestApprove> ITRequestApproves { get; set; }
        public virtual DbSet<ServiceRequestDetail> ServiceRequestDetails { get; set; }
        public virtual DbSet<MachinePartsApprove> MachinePartsApproves { get; set; }
        public virtual DbSet<ITRequestPO> ITRequestPOes { get; set; }
        public virtual DbSet<MedicalsuppliesRequestApprove> MedicalsuppliesRequestApproves { get; set; }
        public virtual DbSet<ITReceivingMaster> ITReceivingMasters { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemCategory> ItemCategories { get; set; }
    
        public virtual ObjectResult<GetUserInformation> GetUserInformation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserInformation>("GetUserInformation");
        }
    
        public virtual int InsertUpdateUserDetails(Nullable<long> userID, string firstName, string lastName, string userName, string password, string email, string phoneNo, Nullable<long> xtn, Nullable<long> corporateID, string facilityID, Nullable<long> userRoleID, Nullable<bool> isActive, Nullable<long> createdBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var xtnParameter = xtn.HasValue ?
                new ObjectParameter("Xtn", xtn) :
                new ObjectParameter("Xtn", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUserDetails", userIDParameter, firstNameParameter, lastNameParameter, userNameParameter, passwordParameter, emailParameter, phoneNoParameter, xtnParameter, corporateIDParameter, facilityIDParameter, userRoleIDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<BindExistuser> BindExistuser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindExistuser>("BindExistuser");
        }
    
        public virtual ObjectResult<BindUserRole> BindUserRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindUserRole>("BindUserRole");
        }
    
        public virtual ObjectResult<GetUserDetails> GetUserDetails(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDetails>("GetUserDetails", userIDParameter);
        }
    
        public virtual int DeleteVendor(Nullable<long> venderID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var venderIDParameter = venderID.HasValue ?
                new ObjectParameter("VenderID", venderID) :
                new ObjectParameter("VenderID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendor", venderIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetvendorDetails> GetvendorDetails(string searchItem)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetvendorDetails>("GetvendorDetails", searchItemParameter);
        }
    
        public virtual int InsertUpdateVendorDetails(Nullable<long> vendorID, string vendorShortName, string vendorDescription, string contactName, string contactPhone, string contactEmail, string pOEmail, string alternateEmail, string address1, string address2, string city, Nullable<long> state, string zip, string phone, Nullable<long> xtn, string fax, Nullable<bool> all, Nullable<bool> regularSupplies, Nullable<bool> machineParts, Nullable<bool> serviceOrder, Nullable<bool> buildingMaintenance, Nullable<bool> iT, Nullable<long> createdBy, Nullable<long> lastModitifiedBy, Nullable<bool> isActive)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var vendorShortNameParameter = vendorShortName != null ?
                new ObjectParameter("VendorShortName", vendorShortName) :
                new ObjectParameter("VendorShortName", typeof(string));
    
            var vendorDescriptionParameter = vendorDescription != null ?
                new ObjectParameter("VendorDescription", vendorDescription) :
                new ObjectParameter("VendorDescription", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var pOEmailParameter = pOEmail != null ?
                new ObjectParameter("POEmail", pOEmail) :
                new ObjectParameter("POEmail", typeof(string));
    
            var alternateEmailParameter = alternateEmail != null ?
                new ObjectParameter("AlternateEmail", alternateEmail) :
                new ObjectParameter("AlternateEmail", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var xtnParameter = xtn.HasValue ?
                new ObjectParameter("Xtn", xtn) :
                new ObjectParameter("Xtn", typeof(long));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var allParameter = all.HasValue ?
                new ObjectParameter("All", all) :
                new ObjectParameter("All", typeof(bool));
    
            var regularSuppliesParameter = regularSupplies.HasValue ?
                new ObjectParameter("RegularSupplies", regularSupplies) :
                new ObjectParameter("RegularSupplies", typeof(bool));
    
            var machinePartsParameter = machineParts.HasValue ?
                new ObjectParameter("MachineParts", machineParts) :
                new ObjectParameter("MachineParts", typeof(bool));
    
            var serviceOrderParameter = serviceOrder.HasValue ?
                new ObjectParameter("ServiceOrder", serviceOrder) :
                new ObjectParameter("ServiceOrder", typeof(bool));
    
            var buildingMaintenanceParameter = buildingMaintenance.HasValue ?
                new ObjectParameter("BuildingMaintenance", buildingMaintenance) :
                new ObjectParameter("BuildingMaintenance", typeof(bool));
    
            var iTParameter = iT.HasValue ?
                new ObjectParameter("IT", iT) :
                new ObjectParameter("IT", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateVendorDetails", vendorIDParameter, vendorShortNameParameter, vendorDescriptionParameter, contactNameParameter, contactPhoneParameter, contactEmailParameter, pOEmailParameter, alternateEmailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, phoneParameter, xtnParameter, faxParameter, allParameter, regularSuppliesParameter, machinePartsParameter, serviceOrderParameter, buildingMaintenanceParameter, iTParameter, createdByParameter, lastModitifiedByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetFacility> GetFacility()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacility>("GetFacility");
        }
    
        public virtual ObjectResult<GetUserRoleandFacility> GetUserRoleandFacility(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleandFacility>("GetUserRoleandFacility", userIDParameter);
        }
    
        public virtual int RemoveuserRole(Nullable<long> userFacilityRoleID)
        {
            var userFacilityRoleIDParameter = userFacilityRoleID.HasValue ?
                new ObjectParameter("UserFacilityRoleID", userFacilityRoleID) :
                new ObjectParameter("UserFacilityRoleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveuserRole", userFacilityRoleIDParameter);
        }
    
        public virtual ObjectResult<GetLoginDetails> GetLoginDetails(Nullable<long> facilityID, string userName, string password)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLoginDetails>("GetLoginDetails", facilityIDParameter, userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<BindFacility> BindFacility(string facilityCode, string facilityDescription, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var facilityCodeParameter = facilityCode != null ?
                new ObjectParameter("FacilityCode", facilityCode) :
                new ObjectParameter("FacilityCode", typeof(string));
    
            var facilityDescriptionParameter = facilityDescription != null ?
                new ObjectParameter("FacilityDescription", facilityDescription) :
                new ObjectParameter("FacilityDescription", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindFacility>("BindFacility", facilityCodeParameter, facilityDescriptionParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int DeleteFacility(Nullable<long> facilityID, Nullable<long> userID, Nullable<bool> isActive)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFacility", facilityIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetState> GetState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetState>("GetState");
        }
    
        public virtual int InsertUpdateFacility(Nullable<long> facilityID, string facilityShortName, string facilityDescription, string address1, string address2, string city, Nullable<long> state, string zipcode, string phone, string fax, string billAddress1, string billAddress2, string billCity, Nullable<long> billState, string billZipCode, string billPhone, string billFax, Nullable<long> xtn, Nullable<long> billXtn, Nullable<long> fCorporate, string gPAccountCode, string eMRCode, string techPerson, string techPhone, string techEmail, string adminPerson, string adminPhone, string adminEmail, Nullable<long> patientCensus, Nullable<long> employeeCensus, Nullable<long> txWeek, Nullable<long> createdBy, Nullable<long> lastModifiedBy, Nullable<long> copyFacilityID, Nullable<bool> isActive)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var facilityShortNameParameter = facilityShortName != null ?
                new ObjectParameter("FacilityShortName", facilityShortName) :
                new ObjectParameter("FacilityShortName", typeof(string));
    
            var facilityDescriptionParameter = facilityDescription != null ?
                new ObjectParameter("FacilityDescription", facilityDescription) :
                new ObjectParameter("FacilityDescription", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(long));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var billAddress1Parameter = billAddress1 != null ?
                new ObjectParameter("BillAddress1", billAddress1) :
                new ObjectParameter("BillAddress1", typeof(string));
    
            var billAddress2Parameter = billAddress2 != null ?
                new ObjectParameter("BillAddress2", billAddress2) :
                new ObjectParameter("BillAddress2", typeof(string));
    
            var billCityParameter = billCity != null ?
                new ObjectParameter("BillCity", billCity) :
                new ObjectParameter("BillCity", typeof(string));
    
            var billStateParameter = billState.HasValue ?
                new ObjectParameter("BillState", billState) :
                new ObjectParameter("BillState", typeof(long));
    
            var billZipCodeParameter = billZipCode != null ?
                new ObjectParameter("BillZipCode", billZipCode) :
                new ObjectParameter("BillZipCode", typeof(string));
    
            var billPhoneParameter = billPhone != null ?
                new ObjectParameter("BillPhone", billPhone) :
                new ObjectParameter("BillPhone", typeof(string));
    
            var billFaxParameter = billFax != null ?
                new ObjectParameter("BillFax", billFax) :
                new ObjectParameter("BillFax", typeof(string));
    
            var xtnParameter = xtn.HasValue ?
                new ObjectParameter("Xtn", xtn) :
                new ObjectParameter("Xtn", typeof(long));
    
            var billXtnParameter = billXtn.HasValue ?
                new ObjectParameter("BillXtn", billXtn) :
                new ObjectParameter("BillXtn", typeof(long));
    
            var fCorporateParameter = fCorporate.HasValue ?
                new ObjectParameter("FCorporate", fCorporate) :
                new ObjectParameter("FCorporate", typeof(long));
    
            var gPAccountCodeParameter = gPAccountCode != null ?
                new ObjectParameter("GPAccountCode", gPAccountCode) :
                new ObjectParameter("GPAccountCode", typeof(string));
    
            var eMRCodeParameter = eMRCode != null ?
                new ObjectParameter("EMRCode", eMRCode) :
                new ObjectParameter("EMRCode", typeof(string));
    
            var techPersonParameter = techPerson != null ?
                new ObjectParameter("TechPerson", techPerson) :
                new ObjectParameter("TechPerson", typeof(string));
    
            var techPhoneParameter = techPhone != null ?
                new ObjectParameter("TechPhone", techPhone) :
                new ObjectParameter("TechPhone", typeof(string));
    
            var techEmailParameter = techEmail != null ?
                new ObjectParameter("TechEmail", techEmail) :
                new ObjectParameter("TechEmail", typeof(string));
    
            var adminPersonParameter = adminPerson != null ?
                new ObjectParameter("AdminPerson", adminPerson) :
                new ObjectParameter("AdminPerson", typeof(string));
    
            var adminPhoneParameter = adminPhone != null ?
                new ObjectParameter("AdminPhone", adminPhone) :
                new ObjectParameter("AdminPhone", typeof(string));
    
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("AdminEmail", adminEmail) :
                new ObjectParameter("AdminEmail", typeof(string));
    
            var patientCensusParameter = patientCensus.HasValue ?
                new ObjectParameter("PatientCensus", patientCensus) :
                new ObjectParameter("PatientCensus", typeof(long));
    
            var employeeCensusParameter = employeeCensus.HasValue ?
                new ObjectParameter("EmployeeCensus", employeeCensus) :
                new ObjectParameter("EmployeeCensus", typeof(long));
    
            var txWeekParameter = txWeek.HasValue ?
                new ObjectParameter("TxWeek", txWeek) :
                new ObjectParameter("TxWeek", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var copyFacilityIDParameter = copyFacilityID.HasValue ?
                new ObjectParameter("CopyFacilityID", copyFacilityID) :
                new ObjectParameter("CopyFacilityID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFacility", facilityIDParameter, facilityShortNameParameter, facilityDescriptionParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipcodeParameter, phoneParameter, faxParameter, billAddress1Parameter, billAddress2Parameter, billCityParameter, billStateParameter, billZipCodeParameter, billPhoneParameter, billFaxParameter, xtnParameter, billXtnParameter, fCorporateParameter, gPAccountCodeParameter, eMRCodeParameter, techPersonParameter, techPhoneParameter, techEmailParameter, adminPersonParameter, adminPhoneParameter, adminEmailParameter, patientCensusParameter, employeeCensusParameter, txWeekParameter, createdByParameter, lastModifiedByParameter, copyFacilityIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<IsUserExist> IsUserExist(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IsUserExist>("IsUserExist", userNameParameter);
        }
    
        public virtual ObjectResult<BindProduct> BindProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindProduct>("BindProduct");
        }
    
        public virtual ObjectResult<ddlLoadValues> ddlLoadValues(Nullable<long> tableID)
        {
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ddlLoadValues>("ddlLoadValues", tableIDParameter);
        }
    
        public virtual int DeleteProduct(Nullable<long> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", productIDParameter);
        }
    
        public virtual int DeleteProductGroup(Nullable<long> groupID, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductGroup", groupIDParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetZone> GetZone()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZone>("GetZone");
        }
    
        public virtual ObjectResult<BindItem> BindItem(string searchItem)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindItem>("BindItem", searchItemParameter);
        }
    
        public virtual int DeleteItem(Nullable<long> itemID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItem", itemIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual int DeleteItemMapping(Nullable<long> itemMapID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var itemMapIDParameter = itemMapID.HasValue ?
                new ObjectParameter("ItemMapID", itemMapID) :
                new ObjectParameter("ItemMapID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemMapping", itemMapIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual int GetCategoryMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCategoryMaster");
        }
    
        public virtual ObjectResult<GetItemDRD> GetItemDRD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDRD>("GetItemDRD");
        }
    
        public virtual ObjectResult<GetItemMap> GetItemMap(string searchItem)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemMap>("GetItemMap", searchItemParameter);
        }
    
        public virtual int InsertCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCategory", categoryNameParameter);
        }
    
        public virtual int InsertItemMap(Nullable<long> itemMapID, Nullable<long> itemID, Nullable<long> categoryID, Nullable<long> vendorID, string vendorItemID, Nullable<long> createdBy, Nullable<System.DateTime> craetedOn, Nullable<bool> isActive)
        {
            var itemMapIDParameter = itemMapID.HasValue ?
                new ObjectParameter("ItemMapID", itemMapID) :
                new ObjectParameter("ItemMapID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var vendorItemIDParameter = vendorItemID != null ?
                new ObjectParameter("VendorItemID", vendorItemID) :
                new ObjectParameter("VendorItemID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var craetedOnParameter = craetedOn.HasValue ?
                new ObjectParameter("CraetedOn", craetedOn) :
                new ObjectParameter("CraetedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertItemMap", itemMapIDParameter, itemIDParameter, categoryIDParameter, vendorIDParameter, vendorItemIDParameter, createdByParameter, craetedOnParameter, isActiveParameter);
        }
    
        public virtual int InsertUpdateItem(Nullable<long> itemID, string itemShortName, Nullable<long> categoryID, string itemDescription, Nullable<long> uOM, Nullable<long> qtyPack, string unitPriceCurrency, Nullable<decimal> unitPriceValue, Nullable<decimal> eachPrice, Nullable<bool> standard, Nullable<bool> nonStandard, string gPBillingCode, string nDC, Nullable<long> createdBy, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemShortNameParameter = itemShortName != null ?
                new ObjectParameter("ItemShortName", itemShortName) :
                new ObjectParameter("ItemShortName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(long));
    
            var unitPriceCurrencyParameter = unitPriceCurrency != null ?
                new ObjectParameter("UnitPriceCurrency", unitPriceCurrency) :
                new ObjectParameter("UnitPriceCurrency", typeof(string));
    
            var unitPriceValueParameter = unitPriceValue.HasValue ?
                new ObjectParameter("UnitPriceValue", unitPriceValue) :
                new ObjectParameter("UnitPriceValue", typeof(decimal));
    
            var eachPriceParameter = eachPrice.HasValue ?
                new ObjectParameter("EachPrice", eachPrice) :
                new ObjectParameter("EachPrice", typeof(decimal));
    
            var standardParameter = standard.HasValue ?
                new ObjectParameter("Standard", standard) :
                new ObjectParameter("Standard", typeof(bool));
    
            var nonStandardParameter = nonStandard.HasValue ?
                new ObjectParameter("NonStandard", nonStandard) :
                new ObjectParameter("NonStandard", typeof(bool));
    
            var gPBillingCodeParameter = gPBillingCode != null ?
                new ObjectParameter("GPBillingCode", gPBillingCode) :
                new ObjectParameter("GPBillingCode", typeof(string));
    
            var nDCParameter = nDC != null ?
                new ObjectParameter("NDC", nDC) :
                new ObjectParameter("NDC", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateItem", itemIDParameter, itemShortNameParameter, categoryIDParameter, itemDescriptionParameter, uOMParameter, qtyPackParameter, unitPriceCurrencyParameter, unitPriceValueParameter, eachPriceParameter, standardParameter, nonStandardParameter, gPBillingCodeParameter, nDCParameter, createdByParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual int ddlCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ddlCategory");
        }
    
        public virtual ObjectResult<BindPermission> BindPermission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindPermission>("BindPermission");
        }
    
        public virtual ObjectResult<GetdrpMainMenu> GetdrpMainMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetdrpMainMenu>("GetdrpMainMenu");
        }
    
        public virtual ObjectResult<GetdrpSubMenu> GetdrpSubMenu(Nullable<long> mainMenuID)
        {
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetdrpSubMenu>("GetdrpSubMenu", mainMenuIDParameter);
        }
    
        public virtual ObjectResult<GetPermission> GetPermission(Nullable<long> mainMenuID, Nullable<long> subMenuID)
        {
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPermission>("GetPermission", mainMenuIDParameter, subMenuIDParameter);
        }
    
        public virtual int InsertUpdatePermission(Nullable<long> permissionID, Nullable<long> userRoleID, Nullable<long> mainMenuID, Nullable<long> subMenuID, string pageName, Nullable<bool> isActive, Nullable<bool> isEdit, Nullable<bool> isViewOnly, Nullable<bool> isEmailNotification, Nullable<long> createdBy)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isEditParameter = isEdit.HasValue ?
                new ObjectParameter("IsEdit", isEdit) :
                new ObjectParameter("IsEdit", typeof(bool));
    
            var isViewOnlyParameter = isViewOnly.HasValue ?
                new ObjectParameter("IsViewOnly", isViewOnly) :
                new ObjectParameter("IsViewOnly", typeof(bool));
    
            var isEmailNotificationParameter = isEmailNotification.HasValue ?
                new ObjectParameter("IsEmailNotification", isEmailNotification) :
                new ObjectParameter("IsEmailNotification", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePermission", permissionIDParameter, userRoleIDParameter, mainMenuIDParameter, subMenuIDParameter, pageNameParameter, isActiveParameter, isEditParameter, isViewOnlyParameter, isEmailNotificationParameter, createdByParameter);
        }
    
        public virtual ObjectResult<ddlCurrency> ddlCurrency()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ddlCurrency>("ddlCurrency");
        }
    
        public virtual int InsertCurrency(string currencyName)
        {
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCurrency", currencyNameParameter);
        }
    
        public virtual ObjectResult<GetRegionMaster> GetRegionMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRegionMaster>("GetRegionMaster");
        }
    
        public virtual ObjectResult<GetCorporate> GetCorporate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporate>("GetCorporate");
        }
    
        public virtual int InsertRole(string userRole, Nullable<long> mainMenuID, Nullable<long> subMenuID, Nullable<long> createdBy)
        {
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRole", userRoleParameter, mainMenuIDParameter, subMenuIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetUom> GetUom()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUom>("GetUom");
        }
    
        public virtual int DeleteUom(Nullable<long> uomID, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var uomIDParameter = uomID.HasValue ?
                new ObjectParameter("UomID", uomID) :
                new ObjectParameter("UomID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUom", uomIDParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual int InsertUOM(Nullable<long> uomID, string uomName, Nullable<long> createdBy, Nullable<System.DateTime> createdOn, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<bool> isActive)
        {
            var uomIDParameter = uomID.HasValue ?
                new ObjectParameter("UomID", uomID) :
                new ObjectParameter("UomID", typeof(long));
    
            var uomNameParameter = uomName != null ?
                new ObjectParameter("UomName", uomName) :
                new ObjectParameter("UomName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUOM", uomIDParameter, uomNameParameter, createdByParameter, createdOnParameter, lastModifiedByParameter, lastModifiedOnParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetCorporateFacility> GetCorporateFacility(Nullable<long> corporate)
        {
            var corporateParameter = corporate.HasValue ?
                new ObjectParameter("Corporate", corporate) :
                new ObjectParameter("Corporate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateFacility>("GetCorporateFacility", corporateParameter);
        }
    
        public virtual int DeleteGPBilling(Nullable<long> gPBillingID)
        {
            var gPBillingIDParameter = gPBillingID.HasValue ?
                new ObjectParameter("GPBillingID", gPBillingID) :
                new ObjectParameter("GPBillingID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteGPBilling", gPBillingIDParameter);
        }
    
        public virtual ObjectResult<GetGPBilling> GetGPBilling()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGPBilling>("GetGPBilling");
        }
    
        public virtual int InsertGPBilling(Nullable<long> gPBillingID, string gPBillingCode, Nullable<long> createdBy, Nullable<System.DateTime> createdOn, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn)
        {
            var gPBillingIDParameter = gPBillingID.HasValue ?
                new ObjectParameter("GPBillingID", gPBillingID) :
                new ObjectParameter("GPBillingID", typeof(long));
    
            var gPBillingCodeParameter = gPBillingCode != null ?
                new ObjectParameter("GPBillingCode", gPBillingCode) :
                new ObjectParameter("GPBillingCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertGPBilling", gPBillingIDParameter, gPBillingCodeParameter, createdByParameter, createdOnParameter, lastModifiedByParameter, lastModifiedOnParameter);
        }
    
        public virtual ObjectResult<GetFacilityItemMap> GetFacilityItemMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilityItemMap>("GetFacilityItemMap");
        }
    
        public virtual int DeleteFacilityItemMap(Nullable<long> facilityItemMapID, Nullable<long> userID, Nullable<bool> isActive)
        {
            var facilityItemMapIDParameter = facilityItemMapID.HasValue ?
                new ObjectParameter("FacilityItemMapID", facilityItemMapID) :
                new ObjectParameter("FacilityItemMapID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFacilityItemMap", facilityItemMapIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual int InsertFacilityItemMap(Nullable<long> facilityItemMapID, Nullable<long> facilityID, Nullable<long> itemID, Nullable<long> createdBy)
        {
            var facilityItemMapIDParameter = facilityItemMapID.HasValue ?
                new ObjectParameter("FacilityItemMapID", facilityItemMapID) :
                new ObjectParameter("FacilityItemMapID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFacilityItemMap", facilityItemMapIDParameter, facilityIDParameter, itemIDParameter, createdByParameter);
        }
    
        public virtual int CopyFacilityProducts(Nullable<long> facilityID, Nullable<long> copyFacilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var copyFacilityIDParameter = copyFacilityID.HasValue ?
                new ObjectParameter("CopyFacilityID", copyFacilityID) :
                new ObjectParameter("CopyFacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyFacilityProducts", facilityIDParameter, copyFacilityIDParameter);
        }
    
        public virtual ObjectResult<GetDrpItemsByCategory> GetDrpItemsByCategory(Nullable<long> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrpItemsByCategory>("GetDrpItemsByCategory", categoryIDParameter);
        }
    
        public virtual ObjectResult<GetFacilityShortName> GetFacilityShortName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilityShortName>("GetFacilityShortName");
        }
    
        public virtual ObjectResult<GetItemsbyFacilityID> GetItemsbyFacilityID(Nullable<long> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemsbyFacilityID>("GetItemsbyFacilityID", facilityIDParameter);
        }
    
        public virtual int InsertUpdateFacilityItemMap(Nullable<long> facilityItemMapID, Nullable<long> facilityID, string cItemID, Nullable<long> createdBy)
        {
            var facilityItemMapIDParameter = facilityItemMapID.HasValue ?
                new ObjectParameter("FacilityItemMapID", facilityItemMapID) :
                new ObjectParameter("FacilityItemMapID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var cItemIDParameter = cItemID != null ?
                new ObjectParameter("CItemID", cItemID) :
                new ObjectParameter("CItemID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFacilityItemMap", facilityItemMapIDParameter, facilityIDParameter, cItemIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetUserPagePermission> GetUserPagePermission(Nullable<long> userRoleID)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPagePermission>("GetUserPagePermission", userRoleIDParameter);
        }
    
        public virtual ObjectResult<GetItemCategory> GetItemCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemCategory>("GetItemCategory");
        }
    
        public virtual int InsertUpdateCategory(Nullable<long> categoryID, string categoryName, string usage, Nullable<long> createdBy, Nullable<System.DateTime> createdOn, Nullable<long> lastModifiedBy, Nullable<System.DateTime> lastModifiedOn, Nullable<bool> isActive)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var usageParameter = usage != null ?
                new ObjectParameter("Usage", usage) :
                new ObjectParameter("Usage", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var lastModifiedOnParameter = lastModifiedOn.HasValue ?
                new ObjectParameter("LastModifiedOn", lastModifiedOn) :
                new ObjectParameter("LastModifiedOn", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCategory", categoryIDParameter, categoryNameParameter, usageParameter, createdByParameter, createdOnParameter, lastModifiedByParameter, lastModifiedOnParameter, isActiveParameter);
        }
    
        public virtual int DeleteItemCategory(Nullable<long> categoryID, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteItemCategory", categoryIDParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<BindSearchItem> BindSearchItem(string searchItem)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindSearchItem>("BindSearchItem", searchItemParameter);
        }
    
        public virtual ObjectResult<BindSearchFacility> BindSearchFacility(string searchFacility)
        {
            var searchFacilityParameter = searchFacility != null ?
                new ObjectParameter("SearchFacility", searchFacility) :
                new ObjectParameter("SearchFacility", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindSearchFacility>("BindSearchFacility", searchFacilityParameter);
        }
    
        public virtual int DeleteFacilityVendorAccount(Nullable<long> facilityVendorAccID, Nullable<long> userID, Nullable<bool> isActive)
        {
            var facilityVendorAccIDParameter = facilityVendorAccID.HasValue ?
                new ObjectParameter("FacilityVendorAccID", facilityVendorAccID) :
                new ObjectParameter("FacilityVendorAccID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFacilityVendorAccount", facilityVendorAccIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetFacilityVendorAccount> GetFacilityVendorAccount(string searchItem)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilityVendorAccount>("GetFacilityVendorAccount", searchItemParameter);
        }
    
        public virtual int InsertUpdateFacilityVendorAccount(Nullable<long> facilityVendorAccID, Nullable<long> facilityID, Nullable<long> vendorID, string shipAccount, string billAccount, Nullable<long> createdBy, Nullable<bool> isActive)
        {
            var facilityVendorAccIDParameter = facilityVendorAccID.HasValue ?
                new ObjectParameter("FacilityVendorAccID", facilityVendorAccID) :
                new ObjectParameter("FacilityVendorAccID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var shipAccountParameter = shipAccount != null ?
                new ObjectParameter("ShipAccount", shipAccount) :
                new ObjectParameter("ShipAccount", typeof(string));
    
            var billAccountParameter = billAccount != null ?
                new ObjectParameter("BillAccount", billAccount) :
                new ObjectParameter("BillAccount", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFacilityVendorAccount", facilityVendorAccIDParameter, facilityIDParameter, vendorIDParameter, shipAccountParameter, billAccountParameter, createdByParameter, isActiveParameter);
        }
    
        public virtual int InsertUpdateVendorOrderDue(Nullable<long> venOrderDueID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<int> orderType, Nullable<System.DateTime> orderdueDate, Nullable<System.DateTime> deliveryDate, Nullable<long> deliveryWindow, Nullable<long> dayToNotify, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var venOrderDueIDParameter = venOrderDueID.HasValue ?
                new ObjectParameter("VenOrderDueID", venOrderDueID) :
                new ObjectParameter("VenOrderDueID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            var orderdueDateParameter = orderdueDate.HasValue ?
                new ObjectParameter("OrderdueDate", orderdueDate) :
                new ObjectParameter("OrderdueDate", typeof(System.DateTime));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryWindowParameter = deliveryWindow.HasValue ?
                new ObjectParameter("DeliveryWindow", deliveryWindow) :
                new ObjectParameter("DeliveryWindow", typeof(long));
    
            var dayToNotifyParameter = dayToNotify.HasValue ?
                new ObjectParameter("DayToNotify", dayToNotify) :
                new ObjectParameter("DayToNotify", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateVendorOrderDue", venOrderDueIDParameter, corporateIDParameter, facilityIDParameter, vendorIDParameter, orderTypeParameter, orderdueDateParameter, deliveryDateParameter, deliveryWindowParameter, dayToNotifyParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindVendorOrderDue> BindVendorOrderDue(Nullable<long> vendorID, Nullable<long> facilityID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindVendorOrderDue>("BindVendorOrderDue", vendorIDParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<ValidateVendorOrderType> ValidateVendorOrderType(Nullable<long> facilityID, Nullable<long> vendorID, Nullable<System.DateTime> orderdueDate)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var orderdueDateParameter = orderdueDate.HasValue ?
                new ObjectParameter("OrderdueDate", orderdueDate) :
                new ObjectParameter("OrderdueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateVendorOrderType>("ValidateVendorOrderType", facilityIDParameter, vendorIDParameter, orderdueDateParameter);
        }
    
        public virtual ObjectResult<GetFacilitySupply> GetFacilitySupply(Nullable<long> facilityID, Nullable<long> vendorID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilitySupply>("GetFacilitySupply", facilityIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<GetFacilitySupplyGird> GetFacilitySupplyGird(Nullable<long> corporateID, Nullable<long> facilityID, string vendorID, string categoryID, Nullable<System.DateTime> vendorOrderDate)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var vendorOrderDateParameter = vendorOrderDate.HasValue ?
                new ObjectParameter("VendorOrderDate", vendorOrderDate) :
                new ObjectParameter("VendorOrderDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilitySupplyGird>("GetFacilitySupplyGird", corporateIDParameter, facilityIDParameter, vendorIDParameter, categoryIDParameter, vendorOrderDateParameter);
        }
    
        public virtual int InsertUpdateFacilitySupply(Nullable<long> facilitySupplyID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<long> categoryID, Nullable<long> itemID, Nullable<long> census, Nullable<bool> isEmp, Nullable<bool> isPatient, Nullable<bool> isBoth, Nullable<bool> isOthers, Nullable<decimal> factor, Nullable<System.DateTime> vendorOrderDate, Nullable<long> parlevel, Nullable<bool> isActive, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var facilitySupplyIDParameter = facilitySupplyID.HasValue ?
                new ObjectParameter("FacilitySupplyID", facilitySupplyID) :
                new ObjectParameter("FacilitySupplyID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var censusParameter = census.HasValue ?
                new ObjectParameter("Census", census) :
                new ObjectParameter("Census", typeof(long));
    
            var isEmpParameter = isEmp.HasValue ?
                new ObjectParameter("IsEmp", isEmp) :
                new ObjectParameter("IsEmp", typeof(bool));
    
            var isPatientParameter = isPatient.HasValue ?
                new ObjectParameter("IsPatient", isPatient) :
                new ObjectParameter("IsPatient", typeof(bool));
    
            var isBothParameter = isBoth.HasValue ?
                new ObjectParameter("IsBoth", isBoth) :
                new ObjectParameter("IsBoth", typeof(bool));
    
            var isOthersParameter = isOthers.HasValue ?
                new ObjectParameter("IsOthers", isOthers) :
                new ObjectParameter("IsOthers", typeof(bool));
    
            var factorParameter = factor.HasValue ?
                new ObjectParameter("Factor", factor) :
                new ObjectParameter("Factor", typeof(decimal));
    
            var vendorOrderDateParameter = vendorOrderDate.HasValue ?
                new ObjectParameter("VendorOrderDate", vendorOrderDate) :
                new ObjectParameter("VendorOrderDate", typeof(System.DateTime));
    
            var parlevelParameter = parlevel.HasValue ?
                new ObjectParameter("Parlevel", parlevel) :
                new ObjectParameter("Parlevel", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateFacilitySupply", facilitySupplyIDParameter, corporateIDParameter, facilityIDParameter, vendorIDParameter, categoryIDParameter, itemIDParameter, censusParameter, isEmpParameter, isPatientParameter, isBothParameter, isOthersParameter, factorParameter, vendorOrderDateParameter, parlevelParameter, isActiveParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetEquipmentCategory> GetEquipmentCategory(Nullable<long> corporateID, string mode)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentCategory>("GetEquipmentCategory", corporateIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetEquipementList> GetEquipementList(Nullable<long> equipementSubCategoryID, string mode)
        {
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipementList>("GetEquipementList", equipementSubCategoryIDParameter, modeParameter);
        }
    
        public virtual int InsertMachineMaster(Nullable<long> facilityID, string manufacturer, string manufacturedyear, Nullable<int> hoursonthemachine, Nullable<long> equipementCategory, Nullable<long> equipementSubCategory, Nullable<long> equipementList, string model, string serialNo, string warranty, string gpAccountCode, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var manufacturedyearParameter = manufacturedyear != null ?
                new ObjectParameter("Manufacturedyear", manufacturedyear) :
                new ObjectParameter("Manufacturedyear", typeof(string));
    
            var hoursonthemachineParameter = hoursonthemachine.HasValue ?
                new ObjectParameter("Hoursonthemachine", hoursonthemachine) :
                new ObjectParameter("Hoursonthemachine", typeof(int));
    
            var equipementCategoryParameter = equipementCategory.HasValue ?
                new ObjectParameter("EquipementCategory", equipementCategory) :
                new ObjectParameter("EquipementCategory", typeof(long));
    
            var equipementSubCategoryParameter = equipementSubCategory.HasValue ?
                new ObjectParameter("EquipementSubCategory", equipementSubCategory) :
                new ObjectParameter("EquipementSubCategory", typeof(long));
    
            var equipementListParameter = equipementList.HasValue ?
                new ObjectParameter("EquipementList", equipementList) :
                new ObjectParameter("EquipementList", typeof(long));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var warrantyParameter = warranty != null ?
                new ObjectParameter("Warranty", warranty) :
                new ObjectParameter("Warranty", typeof(string));
    
            var gpAccountCodeParameter = gpAccountCode != null ?
                new ObjectParameter("GpAccountCode", gpAccountCode) :
                new ObjectParameter("GpAccountCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMachineMaster", facilityIDParameter, manufacturerParameter, manufacturedyearParameter, hoursonthemachineParameter, equipementCategoryParameter, equipementSubCategoryParameter, equipementListParameter, modelParameter, serialNoParameter, warrantyParameter, gpAccountCodeParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual int InsertEquipmentList(Nullable<long> equipementSubCategoryID, string equipListDesc, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var equipListDescParameter = equipListDesc != null ?
                new ObjectParameter("EquipListDesc", equipListDesc) :
                new ObjectParameter("EquipListDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEquipmentList", equipementSubCategoryIDParameter, equipListDescParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual int InsertEquipmentCategory(Nullable<long> corporateID, string equipDesc, Nullable<long> createdBy, ObjectParameter equipmentCategoryMasterID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var equipDescParameter = equipDesc != null ?
                new ObjectParameter("EquipDesc", equipDesc) :
                new ObjectParameter("EquipDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEquipmentCategory", corporateIDParameter, equipDescParameter, createdByParameter, equipmentCategoryMasterID);
        }
    
        public virtual int UpdateEquipmentcategory(Nullable<long> equipementCategoryID, string equipDesc, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var equipDescParameter = equipDesc != null ?
                new ObjectParameter("EquipDesc", equipDesc) :
                new ObjectParameter("EquipDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentcategory", equipementCategoryIDParameter, equipDescParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateEquipmentList(Nullable<long> equipementListID, Nullable<long> equipementSubCategoryID, string equipListDesc, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var equipementListIDParameter = equipementListID.HasValue ?
                new ObjectParameter("EquipementListID", equipementListID) :
                new ObjectParameter("EquipementListID", typeof(long));
    
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var equipListDescParameter = equipListDesc != null ?
                new ObjectParameter("EquipListDesc", equipListDesc) :
                new ObjectParameter("EquipListDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentList", equipementListIDParameter, equipementSubCategoryIDParameter, equipListDescParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMachineMaster(Nullable<long> machineID, Nullable<long> facilityID, string manufacturer, string manufacturedyear, Nullable<int> hoursonthemachine, Nullable<long> equipementCategory, Nullable<long> equipementSubCategory, Nullable<long> equipementList, string model, string serialNo, string warranty, string gpAccountCode, Nullable<long> createdBy, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var manufacturedyearParameter = manufacturedyear != null ?
                new ObjectParameter("Manufacturedyear", manufacturedyear) :
                new ObjectParameter("Manufacturedyear", typeof(string));
    
            var hoursonthemachineParameter = hoursonthemachine.HasValue ?
                new ObjectParameter("Hoursonthemachine", hoursonthemachine) :
                new ObjectParameter("Hoursonthemachine", typeof(int));
    
            var equipementCategoryParameter = equipementCategory.HasValue ?
                new ObjectParameter("EquipementCategory", equipementCategory) :
                new ObjectParameter("EquipementCategory", typeof(long));
    
            var equipementSubCategoryParameter = equipementSubCategory.HasValue ?
                new ObjectParameter("EquipementSubCategory", equipementSubCategory) :
                new ObjectParameter("EquipementSubCategory", typeof(long));
    
            var equipementListParameter = equipementList.HasValue ?
                new ObjectParameter("EquipementList", equipementList) :
                new ObjectParameter("EquipementList", typeof(long));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var warrantyParameter = warranty != null ?
                new ObjectParameter("Warranty", warranty) :
                new ObjectParameter("Warranty", typeof(string));
    
            var gpAccountCodeParameter = gpAccountCode != null ?
                new ObjectParameter("GpAccountCode", gpAccountCode) :
                new ObjectParameter("GpAccountCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMachineMaster", machineIDParameter, facilityIDParameter, manufacturerParameter, manufacturedyearParameter, hoursonthemachineParameter, equipementCategoryParameter, equipementSubCategoryParameter, equipementListParameter, modelParameter, serialNoParameter, warrantyParameter, gpAccountCodeParameter, createdByParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual int DeleteEquipeCategoryMaster(Nullable<long> equipementCategoryID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEquipeCategoryMaster", equipementCategoryIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual int DeleteEquipListMaster(Nullable<long> equipelistID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var equipelistIDParameter = equipelistID.HasValue ?
                new ObjectParameter("EquipelistID", equipelistID) :
                new ObjectParameter("EquipelistID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEquipListMaster", equipelistIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual int DeleteMachinemasterDetails(Nullable<long> machineID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMachinemasterDetails", machineIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetMachinemasterDetails> GetMachinemasterDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachinemasterDetails>("GetMachinemasterDetails");
        }
    
        public virtual ObjectResult<GetMachineMasterbasedMachineID> GetMachineMasterbasedMachineID(Nullable<long> machineID)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineMasterbasedMachineID>("GetMachineMasterbasedMachineID", machineIDParameter);
        }
    
        public virtual ObjectResult<CheckEquipmentlist> CheckEquipmentlist(Nullable<long> equipmentCategoryID)
        {
            var equipmentCategoryIDParameter = equipmentCategoryID.HasValue ?
                new ObjectParameter("EquipmentCategoryID", equipmentCategoryID) :
                new ObjectParameter("EquipmentCategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckEquipmentlist>("CheckEquipmentlist", equipmentCategoryIDParameter);
        }
    
        public virtual ObjectResult<SearchMachinemasterdetails> SearchMachinemasterdetails(Nullable<long> facilityID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMachinemasterdetails>("SearchMachinemasterdetails", facilityIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int DeleteMPRDetails(Nullable<long> mPRDetailsID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var mPRDetailsIDParameter = mPRDetailsID.HasValue ?
                new ObjectParameter("MPRDetailsID", mPRDetailsID) :
                new ObjectParameter("MPRDetailsID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMPRDetails", mPRDetailsIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual int DeleteMPRMaster(Nullable<long> mPRMasterID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMPRMaster", mPRMasterIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetMPRDetails> GetMPRDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMPRDetails>("GetMPRDetails");
        }
    
        public virtual ObjectResult<GetMPRMaster> GetMPRMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMPRMaster>("GetMPRMaster");
        }
    
        public virtual int InsertMPRDetails(Nullable<long> mPRMasterID, string itemID, string itemDescription, string uOM, Nullable<decimal> pricePerUnit, Nullable<int> orderQuantity, Nullable<decimal> totalPrice, Nullable<long> createdBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(decimal));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMPRDetails", mPRMasterIDParameter, itemIDParameter, itemDescriptionParameter, uOMParameter, pricePerUnitParameter, orderQuantityParameter, totalPriceParameter, createdByParameter);
        }
    
        public virtual int InsertMPRMaster(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<long> equipementCategoryID, Nullable<long> equipementSubCategoryID, Nullable<long> equipementListID, string serialNo, string shipping, string hoursonthemachine, string shippingCost, string tax, Nullable<decimal> totalCost, Nullable<long> createdBy, ObjectParameter mPRMasterID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var equipementListIDParameter = equipementListID.HasValue ?
                new ObjectParameter("EquipementListID", equipementListID) :
                new ObjectParameter("EquipementListID", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var hoursonthemachineParameter = hoursonthemachine != null ?
                new ObjectParameter("Hoursonthemachine", hoursonthemachine) :
                new ObjectParameter("Hoursonthemachine", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMPRMaster", corporateIDParameter, facilityIDParameter, vendorIDParameter, equipementCategoryIDParameter, equipementSubCategoryIDParameter, equipementListIDParameter, serialNoParameter, shippingParameter, hoursonthemachineParameter, shippingCostParameter, taxParameter, totalCostParameter, createdByParameter, mPRMasterID);
        }
    
        public virtual ObjectResult<SearchMPRMaster> SearchMPRMaster(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMPRMaster>("SearchMPRMaster", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual int UpdateMPRDetails(Nullable<long> mPRMasterID, Nullable<long> mPRDetailsID, string itemID, string itemDescription, string uOM, Nullable<decimal> pricePerUnit, Nullable<int> orderQuantity, Nullable<decimal> totalPrice, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var mPRDetailsIDParameter = mPRDetailsID.HasValue ?
                new ObjectParameter("MPRDetailsID", mPRDetailsID) :
                new ObjectParameter("MPRDetailsID", typeof(long));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(decimal));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMPRDetails", mPRMasterIDParameter, mPRDetailsIDParameter, itemIDParameter, itemDescriptionParameter, uOMParameter, pricePerUnitParameter, orderQuantityParameter, totalPriceParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMPRMaster(Nullable<long> mPRMasterID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<long> equipmentCategory, Nullable<long> equipementSubCategoryID, Nullable<long> equipmentList, string serialNo, string shipping, string hoursonmachine, string shippingCost, string tax, Nullable<decimal> totalCost, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var equipmentCategoryParameter = equipmentCategory.HasValue ?
                new ObjectParameter("EquipmentCategory", equipmentCategory) :
                new ObjectParameter("EquipmentCategory", typeof(long));
    
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var equipmentListParameter = equipmentList.HasValue ?
                new ObjectParameter("EquipmentList", equipmentList) :
                new ObjectParameter("EquipmentList", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var hoursonmachineParameter = hoursonmachine != null ?
                new ObjectParameter("Hoursonmachine", hoursonmachine) :
                new ObjectParameter("Hoursonmachine", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMPRMaster", mPRMasterIDParameter, corporateIDParameter, facilityIDParameter, vendorIDParameter, equipmentCategoryParameter, equipementSubCategoryIDParameter, equipmentListParameter, serialNoParameter, shippingParameter, hoursonmachineParameter, shippingCostParameter, taxParameter, totalCostParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetMPRDetailsbyMPRMasterID> GetMPRDetailsbyMPRMasterID(Nullable<long> mPRMasterID, Nullable<long> lockedBy, Nullable<long> lockTimeout)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("LockTimeout", lockTimeout) :
                new ObjectParameter("LockTimeout", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMPRDetailsbyMPRMasterID>("GetMPRDetailsbyMPRMasterID", mPRMasterIDParameter, lockedByParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<GetList> GetList(string formName, string listName, string mode)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var listNameParameter = listName != null ?
                new ObjectParameter("ListName", listName) :
                new ObjectParameter("ListName", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetList>("GetList", formNameParameter, listNameParameter, modeParameter);
        }
    
        public virtual ObjectResult<SavedEquipmentList> SavedEquipmentList(Nullable<long> equListID)
        {
            var equListIDParameter = equListID.HasValue ?
                new ObjectParameter("EquListID", equListID) :
                new ObjectParameter("EquListID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedEquipmentList>("SavedEquipmentList", equListIDParameter);
        }
    
        public virtual ObjectResult<SavedEquipmentCategory> SavedEquipmentCategory(Nullable<long> corporateID, Nullable<long> equipmentcategoryID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var equipmentcategoryIDParameter = equipmentcategoryID.HasValue ?
                new ObjectParameter("equipmentcategoryID", equipmentcategoryID) :
                new ObjectParameter("equipmentcategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedEquipmentCategory>("SavedEquipmentCategory", corporateIDParameter, equipmentcategoryIDParameter);
        }
    
        public virtual int InsertShipping(string invenValue, Nullable<long> createdBy)
        {
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertShipping", invenValueParameter, createdByParameter);
        }
    
        public virtual int InsertTimeDelivery(string invenValue, Nullable<long> createdBy)
        {
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTimeDelivery", invenValueParameter, createdByParameter);
        }
    
        public virtual int DeleteShipping(Nullable<long> deletedBy, string invenValue)
        {
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(long));
    
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShipping", deletedByParameter, invenValueParameter);
        }
    
        public virtual int DeleteTimeDelivery(Nullable<long> deletedBy, string invenValue)
        {
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(long));
    
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTimeDelivery", deletedByParameter, invenValueParameter);
        }
    
        public virtual int UpdateShipping(string invenValue, string updatekeyvalue, Nullable<long> createdBy)
        {
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            var updatekeyvalueParameter = updatekeyvalue != null ?
                new ObjectParameter("Updatekeyvalue", updatekeyvalue) :
                new ObjectParameter("Updatekeyvalue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShipping", invenValueParameter, updatekeyvalueParameter, createdByParameter);
        }
    
        public virtual int UpdateTimeDelivery(string invenValue, string updatekeyvalue, Nullable<long> createdBy)
        {
            var invenValueParameter = invenValue != null ?
                new ObjectParameter("InvenValue", invenValue) :
                new ObjectParameter("InvenValue", typeof(string));
    
            var updatekeyvalueParameter = updatekeyvalue != null ?
                new ObjectParameter("Updatekeyvalue", updatekeyvalue) :
                new ObjectParameter("Updatekeyvalue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTimeDelivery", invenValueParameter, updatekeyvalueParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetLookUpList> GetLookUpList(Nullable<long> tableID)
        {
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLookUpList>("GetLookUpList", tableIDParameter);
        }
    
        public virtual ObjectResult<GetMedicalsuppliesItem> GetMedicalsuppliesItem(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicalsuppliesItem>("GetMedicalsuppliesItem", corporateIDParameter, facilityIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<GetOrderPeriod> GetOrderPeriod(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<int> ordertype)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var ordertypeParameter = ordertype.HasValue ?
                new ObjectParameter("Ordertype", ordertype) :
                new ObjectParameter("Ordertype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrderPeriod>("GetOrderPeriod", corporateIDParameter, facilityIDParameter, vendorIDParameter, ordertypeParameter);
        }
    
        public virtual int InsertMedicalsuppliesMaster(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendor, Nullable<int> orderType, Nullable<System.DateTime> orderPeriod, string shipping, string timeDelivery, string remarks, Nullable<long> createdBy, Nullable<long> lastModifiedBy, ObjectParameter medicalSupplyMasterID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorParameter = vendor.HasValue ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            var orderPeriodParameter = orderPeriod.HasValue ?
                new ObjectParameter("OrderPeriod", orderPeriod) :
                new ObjectParameter("OrderPeriod", typeof(System.DateTime));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var timeDeliveryParameter = timeDelivery != null ?
                new ObjectParameter("TimeDelivery", timeDelivery) :
                new ObjectParameter("TimeDelivery", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMedicalsuppliesMaster", corporateIDParameter, facilityIDParameter, vendorParameter, orderTypeParameter, orderPeriodParameter, shippingParameter, timeDeliveryParameter, remarksParameter, createdByParameter, lastModifiedByParameter, medicalSupplyMasterID);
        }
    
        public virtual int InsertMedicalSuppliesDetail(Nullable<long> pRMasterID, Nullable<long> sNGItemID, string itemcatgroup, string itemdesc, Nullable<long> uOM, Nullable<int> qtyPack, string parlevel, Nullable<int> qtyInHand, Nullable<int> orderQty, Nullable<decimal> price, Nullable<decimal> totalPrice, Nullable<long> createdBy)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var sNGItemIDParameter = sNGItemID.HasValue ?
                new ObjectParameter("SNGItemID", sNGItemID) :
                new ObjectParameter("SNGItemID", typeof(long));
    
            var itemcatgroupParameter = itemcatgroup != null ?
                new ObjectParameter("Itemcatgroup", itemcatgroup) :
                new ObjectParameter("Itemcatgroup", typeof(string));
    
            var itemdescParameter = itemdesc != null ?
                new ObjectParameter("Itemdesc", itemdesc) :
                new ObjectParameter("Itemdesc", typeof(string));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(int));
    
            var parlevelParameter = parlevel != null ?
                new ObjectParameter("Parlevel", parlevel) :
                new ObjectParameter("Parlevel", typeof(string));
    
            var qtyInHandParameter = qtyInHand.HasValue ?
                new ObjectParameter("QtyInHand", qtyInHand) :
                new ObjectParameter("QtyInHand", typeof(int));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMedicalSuppliesDetail", pRMasterIDParameter, sNGItemIDParameter, itemcatgroupParameter, itemdescParameter, uOMParameter, qtyPackParameter, parlevelParameter, qtyInHandParameter, orderQtyParameter, priceParameter, totalPriceParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SearchMedicalSupplyRequest> SearchMedicalSupplyRequest(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMedicalSupplyRequest>("SearchMedicalSupplyRequest", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual ObjectResult<GetMedicalSupplyRequestMaster> GetMedicalSupplyRequestMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicalSupplyRequestMaster>("GetMedicalSupplyRequestMaster");
        }
    
        public virtual ObjectResult<BindMedicalsupplymasterandDetail> BindMedicalsupplymasterandDetail(Nullable<long> medicalSupplyID)
        {
            var medicalSupplyIDParameter = medicalSupplyID.HasValue ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalsupplymasterandDetail>("BindMedicalsupplymasterandDetail", medicalSupplyIDParameter);
        }
    
        public virtual int UpdateMedicalsupplyMaster(Nullable<long> medicalSuppliesID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendor, Nullable<int> ordertype, Nullable<System.DateTime> orderPeriod, string shipping, string timeDelivery, string remarks, Nullable<long> lastModifiedBy)
        {
            var medicalSuppliesIDParameter = medicalSuppliesID.HasValue ?
                new ObjectParameter("MedicalSuppliesID", medicalSuppliesID) :
                new ObjectParameter("MedicalSuppliesID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorParameter = vendor.HasValue ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(long));
    
            var ordertypeParameter = ordertype.HasValue ?
                new ObjectParameter("Ordertype", ordertype) :
                new ObjectParameter("Ordertype", typeof(int));
    
            var orderPeriodParameter = orderPeriod.HasValue ?
                new ObjectParameter("OrderPeriod", orderPeriod) :
                new ObjectParameter("OrderPeriod", typeof(System.DateTime));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var timeDeliveryParameter = timeDelivery != null ?
                new ObjectParameter("TimeDelivery", timeDelivery) :
                new ObjectParameter("TimeDelivery", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedicalsupplyMaster", medicalSuppliesIDParameter, corporateIDParameter, facilityIDParameter, vendorParameter, ordertypeParameter, orderPeriodParameter, shippingParameter, timeDeliveryParameter, remarksParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMedicalSupplyDetails(Nullable<long> pRMasterID, Nullable<long> medicalsuppliesItemID, Nullable<long> sNGItemID, string itemCategoryGroup, string itemDescription, Nullable<long> uOM, Nullable<int> qtyPack, string parlevel, Nullable<int> qtyInHand, Nullable<int> orderQty, Nullable<decimal> price, Nullable<decimal> totalPrice, Nullable<long> lastModifiedBy)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var medicalsuppliesItemIDParameter = medicalsuppliesItemID.HasValue ?
                new ObjectParameter("MedicalsuppliesItemID", medicalsuppliesItemID) :
                new ObjectParameter("MedicalsuppliesItemID", typeof(long));
    
            var sNGItemIDParameter = sNGItemID.HasValue ?
                new ObjectParameter("SNGItemID", sNGItemID) :
                new ObjectParameter("SNGItemID", typeof(long));
    
            var itemCategoryGroupParameter = itemCategoryGroup != null ?
                new ObjectParameter("ItemCategoryGroup", itemCategoryGroup) :
                new ObjectParameter("ItemCategoryGroup", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(int));
    
            var parlevelParameter = parlevel != null ?
                new ObjectParameter("Parlevel", parlevel) :
                new ObjectParameter("Parlevel", typeof(string));
    
            var qtyInHandParameter = qtyInHand.HasValue ?
                new ObjectParameter("QtyInHand", qtyInHand) :
                new ObjectParameter("QtyInHand", typeof(int));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedicalSupplyDetails", pRMasterIDParameter, medicalsuppliesItemIDParameter, sNGItemIDParameter, itemCategoryGroupParameter, itemDescriptionParameter, uOMParameter, qtyPackParameter, parlevelParameter, qtyInHandParameter, orderQtyParameter, priceParameter, totalPriceParameter, lastModifiedByParameter);
        }
    
        public virtual int DeleteServiceRequestDetails(Nullable<long> serviceRequestDetailsID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServiceRequestDetails", serviceRequestDetailsIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<SearchServiceRequestMaster> SearchServiceRequestMaster(string corporateID, string facilityID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));

          

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchServiceRequestMaster>("SearchServiceRequestMaster", corporateIDParameter, facilityIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual int InsertServiceRequestMaster(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<bool> serviceType, Nullable<long> equipmentCategoryID, Nullable<long> equipmentSubCategoryID, Nullable<long> equipementListID, Nullable<long> serviceCategoryID, Nullable<long> serviceListID, Nullable<long> createdBy, ObjectParameter sRMasterID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("ServiceType", serviceType) :
                new ObjectParameter("ServiceType", typeof(bool));
    
            var equipmentCategoryIDParameter = equipmentCategoryID.HasValue ?
                new ObjectParameter("EquipmentCategoryID", equipmentCategoryID) :
                new ObjectParameter("EquipmentCategoryID", typeof(long));
    
            var equipmentSubCategoryIDParameter = equipmentSubCategoryID.HasValue ?
                new ObjectParameter("EquipmentSubCategoryID", equipmentSubCategoryID) :
                new ObjectParameter("EquipmentSubCategoryID", typeof(long));
    
            var equipementListIDParameter = equipementListID.HasValue ?
                new ObjectParameter("EquipementListID", equipementListID) :
                new ObjectParameter("EquipementListID", typeof(long));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var serviceListIDParameter = serviceListID.HasValue ?
                new ObjectParameter("ServiceListID", serviceListID) :
                new ObjectParameter("ServiceListID", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServiceRequestMaster", corporateIDParameter, facilityIDParameter, serviceTypeParameter, equipmentCategoryIDParameter, equipmentSubCategoryIDParameter, equipementListIDParameter, serviceCategoryIDParameter, serviceListIDParameter, createdByParameter, sRMasterID);
        }
    
        public virtual int InsertServcieRequestDetails(Nullable<long> serviceRequestMasterID, Nullable<int> sINo, Nullable<long> vendorID, string service, string unit, Nullable<decimal> price, string quote, Nullable<long> createdBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var sINoParameter = sINo.HasValue ?
                new ObjectParameter("SINo", sINo) :
                new ObjectParameter("SINo", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var serviceParameter = service != null ?
                new ObjectParameter("Service", service) :
                new ObjectParameter("Service", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quoteParameter = quote != null ?
                new ObjectParameter("Quote", quote) :
                new ObjectParameter("Quote", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServcieRequestDetails", serviceRequestMasterIDParameter, sINoParameter, vendorIDParameter, serviceParameter, unitParameter, priceParameter, quoteParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetServiceRequestMaster> GetServiceRequestMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestMaster>("GetServiceRequestMaster");
        }
    
        public virtual ObjectResult<GetServiceRequestetailsbyServiceRequestMasterID> GetServiceRequestetailsbyServiceRequestMasterID(Nullable<long> serviceRequestMasterID, Nullable<long> lockedBy, Nullable<long> lockTimeout)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("LockTimeout", lockTimeout) :
                new ObjectParameter("LockTimeout", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestetailsbyServiceRequestMasterID>("GetServiceRequestetailsbyServiceRequestMasterID", serviceRequestMasterIDParameter, lockedByParameter, lockTimeoutParameter);
        }
    
        public virtual int UpdateServiceRequestMaster(Nullable<long> serviceRequestMasterID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> serviceCategoryID, Nullable<long> serviceListID, Nullable<long> lastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var serviceListIDParameter = serviceListID.HasValue ?
                new ObjectParameter("ServiceListID", serviceListID) :
                new ObjectParameter("ServiceListID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceRequestMaster", serviceRequestMasterIDParameter, corporateIDParameter, facilityIDParameter, serviceCategoryIDParameter, serviceListIDParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateServiceRequestDetails(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, Nullable<int> sINo, string service, string unit, Nullable<decimal> price, string quote, Nullable<long> lastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var sINoParameter = sINo.HasValue ?
                new ObjectParameter("SINo", sINo) :
                new ObjectParameter("SINo", typeof(int));
    
            var serviceParameter = service != null ?
                new ObjectParameter("Service", service) :
                new ObjectParameter("Service", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quoteParameter = quote != null ?
                new ObjectParameter("Quote", quote) :
                new ObjectParameter("Quote", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceRequestDetails", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, sINoParameter, serviceParameter, unitParameter, priceParameter, quoteParameter, lastModifiedByParameter);
        }
    
        public virtual int RemoveMedicalSupplyDetail(Nullable<long> medicalsuppliesItemID, Nullable<long> lastModifiedBy)
        {
            var medicalsuppliesItemIDParameter = medicalsuppliesItemID.HasValue ?
                new ObjectParameter("MedicalsuppliesItemID", medicalsuppliesItemID) :
                new ObjectParameter("MedicalsuppliesItemID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveMedicalSupplyDetail", medicalsuppliesItemIDParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<AddMedicalsupplyitem> AddMedicalsupplyitem(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, string combineKey)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var combineKeyParameter = combineKey != null ?
                new ObjectParameter("CombineKey", combineKey) :
                new ObjectParameter("CombineKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddMedicalsupplyitem>("AddMedicalsupplyitem", corporateIDParameter, facilityIDParameter, vendorIDParameter, combineKeyParameter);
        }
    
        public virtual ObjectResult<GetServiceCategory> GetServiceCategory(Nullable<long> corporateID, string mode)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceCategory>("GetServiceCategory", corporateIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetServiceList> GetServiceList(Nullable<long> serviceCategoryID, string mode)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceList>("GetServiceList", serviceCategoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetActiveEquipementListvalue> GetActiveEquipementListvalue(Nullable<long> equipmentListID)
        {
            var equipmentListIDParameter = equipmentListID.HasValue ?
                new ObjectParameter("EquipmentListID", equipmentListID) :
                new ObjectParameter("EquipmentListID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveEquipementListvalue>("GetActiveEquipementListvalue", equipmentListIDParameter);
        }
    
        public virtual int DeleteServiceCategoryMaster(Nullable<long> serviceCategoryID, Nullable<long> lastModitifiedBy)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServiceCategoryMaster", serviceCategoryIDParameter, lastModitifiedByParameter);
        }
    
        public virtual int DeleteServiceListMaster(Nullable<long> servicelistID, Nullable<long> lastModitifiedBy)
        {
            var servicelistIDParameter = servicelistID.HasValue ?
                new ObjectParameter("ServicelistID", servicelistID) :
                new ObjectParameter("ServicelistID", typeof(long));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServiceListMaster", servicelistIDParameter, lastModitifiedByParameter);
        }
    
        public virtual int InsertServiceCategoryMaster(Nullable<long> corporateID, Nullable<long> facilityID, string serviceCatDesc, Nullable<long> createdBy)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var serviceCatDescParameter = serviceCatDesc != null ?
                new ObjectParameter("ServiceCatDesc", serviceCatDesc) :
                new ObjectParameter("ServiceCatDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServiceCategoryMaster", corporateIDParameter, facilityIDParameter, serviceCatDescParameter, createdByParameter);
        }
    
        public virtual int InsertServiceListMaster(Nullable<long> serviceCategoryID, string serviceListDesc, Nullable<long> createdBy)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var serviceListDescParameter = serviceListDesc != null ?
                new ObjectParameter("ServiceListDesc", serviceListDesc) :
                new ObjectParameter("ServiceListDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServiceListMaster", serviceCategoryIDParameter, serviceListDescParameter, createdByParameter);
        }
    
        public virtual ObjectResult<SavedServiceCategory> SavedServiceCategory(Nullable<long> corporateID, Nullable<long> serviceCategoryID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedServiceCategory>("SavedServiceCategory", corporateIDParameter, serviceCategoryIDParameter);
        }
    
        public virtual ObjectResult<SavedServiceList> SavedServiceList(Nullable<long> serviceListID)
        {
            var serviceListIDParameter = serviceListID.HasValue ?
                new ObjectParameter("ServiceListID", serviceListID) :
                new ObjectParameter("ServiceListID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedServiceList>("SavedServiceList", serviceListIDParameter);
        }
    
        public virtual int UpdateServicecategory(Nullable<long> serviceCategoryID, string serviceCatDesc, Nullable<long> lastModifiedBy)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var serviceCatDescParameter = serviceCatDesc != null ?
                new ObjectParameter("ServiceCatDesc", serviceCatDesc) :
                new ObjectParameter("ServiceCatDesc", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServicecategory", serviceCategoryIDParameter, serviceCatDescParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateServiceList(Nullable<long> serviceListID, Nullable<long> serviceCategoryID, string serviceListDesc, Nullable<long> lastModifiedBy)
        {
            var serviceListIDParameter = serviceListID.HasValue ?
                new ObjectParameter("ServiceListID", serviceListID) :
                new ObjectParameter("ServiceListID", typeof(long));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            var serviceListDescParameter = serviceListDesc != null ?
                new ObjectParameter("ServiceListDesc", serviceListDesc) :
                new ObjectParameter("ServiceListDesc", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceList", serviceListIDParameter, serviceCategoryIDParameter, serviceListDescParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<CheckServicelist> CheckServicelist(Nullable<long> serviceCategoryID)
        {
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckServicelist>("CheckServicelist", serviceCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetServiceAttachment> GetServiceAttachment(Nullable<long> serviceRequestDetailsID)
        {
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceAttachment>("GetServiceAttachment", serviceRequestDetailsIDParameter);
        }
    
        public virtual int InsertServiceAttachment(Nullable<long> serviceRequestDetailsID, string locationOfTheFile, string description, string fileName, Nullable<long> createdBy)
        {
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var locationOfTheFileParameter = locationOfTheFile != null ?
                new ObjectParameter("LocationOfTheFile", locationOfTheFile) :
                new ObjectParameter("LocationOfTheFile", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServiceAttachment", serviceRequestDetailsIDParameter, locationOfTheFileParameter, descriptionParameter, fileNameParameter, createdByParameter);
        }
    
        public virtual int UpdateServiceAttachment(Nullable<long> serviceUploadID, Nullable<long> serviceRequestDetailsID, string locationOfTheFile, string description, string fileName, Nullable<long> lastModifiedBy)
        {
            var serviceUploadIDParameter = serviceUploadID.HasValue ?
                new ObjectParameter("ServiceUploadID", serviceUploadID) :
                new ObjectParameter("ServiceUploadID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var locationOfTheFileParameter = locationOfTheFile != null ?
                new ObjectParameter("LocationOfTheFile", locationOfTheFile) :
                new ObjectParameter("LocationOfTheFile", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceAttachment", serviceUploadIDParameter, serviceRequestDetailsIDParameter, locationOfTheFileParameter, descriptionParameter, fileNameParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetActiveServiceListvalue> GetActiveServiceListvalue(Nullable<long> serviceListID)
        {
            var serviceListIDParameter = serviceListID.HasValue ?
                new ObjectParameter("ServiceListID", serviceListID) :
                new ObjectParameter("ServiceListID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveServiceListvalue>("GetActiveServiceListvalue", serviceListIDParameter);
        }
    
        public virtual ObjectResult<SavedShippingValue> SavedShippingValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedShippingValue>("SavedShippingValue");
        }
    
        public virtual ObjectResult<SavedTimeDeliveryValue> SavedTimeDeliveryValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedTimeDeliveryValue>("SavedTimeDeliveryValue");
        }
    
        public virtual int DeleteServiceAttachment(Nullable<long> serviceUploadID, Nullable<long> lastModitifiedBy)
        {
            var serviceUploadIDParameter = serviceUploadID.HasValue ?
                new ObjectParameter("ServiceUploadID", serviceUploadID) :
                new ObjectParameter("ServiceUploadID", typeof(long));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteServiceAttachment", serviceUploadIDParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetNonsuperAdminMedicalSupplyMaster> GetNonsuperAdminMedicalSupplyMaster(Nullable<long> corporateID, Nullable<long> facilityID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNonsuperAdminMedicalSupplyMaster>("GetNonsuperAdminMedicalSupplyMaster", corporateIDParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<GetmedicalsupplyReviewReport> GetmedicalsupplyReviewReport(string medicalSupplyID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var medicalSupplyIDParameter = medicalSupplyID != null ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetmedicalsupplyReviewReport>("GetmedicalsupplyReviewReport", medicalSupplyIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<BindMedicalsupplymaster> BindMedicalsupplymaster(Nullable<long> medicalSupplyID)
        {
            var medicalSupplyIDParameter = medicalSupplyID.HasValue ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalsupplymaster>("BindMedicalsupplymaster", medicalSupplyIDParameter);
        }
    
        public virtual ObjectResult<BindMedicalsupplyDetail> BindMedicalsupplyDetail(Nullable<long> medicalSupplyID, Nullable<long> lockedBy, Nullable<long> lockTimeout)
        {
            var medicalSupplyIDParameter = medicalSupplyID.HasValue ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(long));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("LockTimeout", lockTimeout) :
                new ObjectParameter("LockTimeout", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalsupplyDetail>("BindMedicalsupplyDetail", medicalSupplyIDParameter, lockedByParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<BindMachinePartsReport> BindMachinePartsReport(string mPRMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var mPRMasterIDParameter = mPRMasterID != null ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMachinePartsReport>("BindMachinePartsReport", mPRMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<BindServiceRequestReport> BindServiceRequestReport(string serviceRequestMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID != null ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindServiceRequestReport>("BindServiceRequestReport", serviceRequestMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetmedicalsupplyReviewReport> GetmedicalsupplyReport(string medicalSupplyID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var medicalSupplyIDParameter = medicalSupplyID != null ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetmedicalsupplyReviewReport>("GetmedicalsupplyReport", medicalSupplyIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<FindDuplicateShippingValue> FindDuplicateShippingValue(string shippingValue)
        {
            var shippingValueParameter = shippingValue != null ?
                new ObjectParameter("ShippingValue", shippingValue) :
                new ObjectParameter("ShippingValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindDuplicateShippingValue>("FindDuplicateShippingValue", shippingValueParameter);
        }
    
        public virtual ObjectResult<FindDuplicateTimeDeliveryValue> FindDuplicateTimeDeliveryValue(string timeDeliveryValue)
        {
            var timeDeliveryValueParameter = timeDeliveryValue != null ?
                new ObjectParameter("TimeDeliveryValue", timeDeliveryValue) :
                new ObjectParameter("TimeDeliveryValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindDuplicateTimeDeliveryValue>("FindDuplicateTimeDeliveryValue", timeDeliveryValueParameter);
        }
    
        public virtual int AutoUpdateLockedOut(Nullable<long> masterID, Nullable<long> lockedOutBy, string screenName)
        {
            var masterIDParameter = masterID.HasValue ?
                new ObjectParameter("MasterID", masterID) :
                new ObjectParameter("MasterID", typeof(long));
    
            var lockedOutByParameter = lockedOutBy.HasValue ?
                new ObjectParameter("LockedOutBy", lockedOutBy) :
                new ObjectParameter("LockedOutBy", typeof(long));
    
            var screenNameParameter = screenName != null ?
                new ObjectParameter("ScreenName", screenName) :
                new ObjectParameter("ScreenName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutoUpdateLockedOut", masterIDParameter, lockedOutByParameter, screenNameParameter);
        }
    
        public virtual int InsertITRequestMaster(Nullable<long> vendorID, Nullable<long> corporateID, Nullable<bool> requesttype, string shipping, Nullable<long> facilityID, Nullable<System.DateTime> fromDate, string audittrial, string remarks, string shippingCost, string tax, Nullable<decimal> toatalCost, Nullable<long> createdBy, ObjectParameter iTRequestMasterID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var requesttypeParameter = requesttype.HasValue ?
                new ObjectParameter("Requesttype", requesttype) :
                new ObjectParameter("Requesttype", typeof(bool));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var audittrialParameter = audittrial != null ?
                new ObjectParameter("Audittrial", audittrial) :
                new ObjectParameter("Audittrial", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var toatalCostParameter = toatalCost.HasValue ?
                new ObjectParameter("ToatalCost", toatalCost) :
                new ObjectParameter("ToatalCost", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertITRequestMaster", vendorIDParameter, corporateIDParameter, requesttypeParameter, shippingParameter, facilityIDParameter, fromDateParameter, audittrialParameter, remarksParameter, shippingCostParameter, taxParameter, toatalCostParameter, createdByParameter, iTRequestMasterID);
        }
    
        public virtual int InsertITRequestDetails(Nullable<long> iTRequestMasterID, Nullable<long> equipcategory, Nullable<long> equiplst, string serialNo, string user, Nullable<decimal> priceperqty, Nullable<int> orderqty, Nullable<decimal> totalPrice, string reason, Nullable<long> createdBy)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var equipcategoryParameter = equipcategory.HasValue ?
                new ObjectParameter("Equipcategory", equipcategory) :
                new ObjectParameter("Equipcategory", typeof(long));
    
            var equiplstParameter = equiplst.HasValue ?
                new ObjectParameter("Equiplst", equiplst) :
                new ObjectParameter("Equiplst", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var priceperqtyParameter = priceperqty.HasValue ?
                new ObjectParameter("Priceperqty", priceperqty) :
                new ObjectParameter("Priceperqty", typeof(decimal));
    
            var orderqtyParameter = orderqty.HasValue ?
                new ObjectParameter("Orderqty", orderqty) :
                new ObjectParameter("Orderqty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertITRequestDetails", iTRequestMasterIDParameter, equipcategoryParameter, equiplstParameter, serialNoParameter, userParameter, priceperqtyParameter, orderqtyParameter, totalPriceParameter, reasonParameter, createdByParameter);
        }
    
        public virtual int UpdateITRequestMaster(Nullable<long> iTRequestMasterID, Nullable<long> vendorID, Nullable<long> corporateID, Nullable<bool> requesttype, string shipping, Nullable<long> facilityID, Nullable<System.DateTime> fromDate, string audittrial, string remarks, string shippingCost, string tax, Nullable<decimal> toatalCost, Nullable<long> lastModifiedBy)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var requesttypeParameter = requesttype.HasValue ?
                new ObjectParameter("Requesttype", requesttype) :
                new ObjectParameter("Requesttype", typeof(bool));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var audittrialParameter = audittrial != null ?
                new ObjectParameter("Audittrial", audittrial) :
                new ObjectParameter("Audittrial", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var toatalCostParameter = toatalCost.HasValue ?
                new ObjectParameter("ToatalCost", toatalCost) :
                new ObjectParameter("ToatalCost", typeof(decimal));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateITRequestMaster", iTRequestMasterIDParameter, vendorIDParameter, corporateIDParameter, requesttypeParameter, shippingParameter, facilityIDParameter, fromDateParameter, audittrialParameter, remarksParameter, shippingCostParameter, taxParameter, toatalCostParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateITRequestDetails(Nullable<long> iTRequestDetailID, Nullable<long> iTRequestMasterID, string sINo, Nullable<long> equipsubcategory, Nullable<long> equiplst, string serialNo, string user, Nullable<decimal> priceperqty, Nullable<int> orderqty, Nullable<decimal> totalPrice, string reason, Nullable<long> lastModifiedBy)
        {
            var iTRequestDetailIDParameter = iTRequestDetailID.HasValue ?
                new ObjectParameter("ITRequestDetailID", iTRequestDetailID) :
                new ObjectParameter("ITRequestDetailID", typeof(long));
    
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var sINoParameter = sINo != null ?
                new ObjectParameter("SINo", sINo) :
                new ObjectParameter("SINo", typeof(string));
    
            var equipsubcategoryParameter = equipsubcategory.HasValue ?
                new ObjectParameter("Equipsubcategory", equipsubcategory) :
                new ObjectParameter("Equipsubcategory", typeof(long));
    
            var equiplstParameter = equiplst.HasValue ?
                new ObjectParameter("Equiplst", equiplst) :
                new ObjectParameter("Equiplst", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var priceperqtyParameter = priceperqty.HasValue ?
                new ObjectParameter("Priceperqty", priceperqty) :
                new ObjectParameter("Priceperqty", typeof(decimal));
    
            var orderqtyParameter = orderqty.HasValue ?
                new ObjectParameter("Orderqty", orderqty) :
                new ObjectParameter("Orderqty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateITRequestDetails", iTRequestDetailIDParameter, iTRequestMasterIDParameter, sINoParameter, equipsubcategoryParameter, equiplstParameter, serialNoParameter, userParameter, priceperqtyParameter, orderqtyParameter, totalPriceParameter, reasonParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindRequestITPartsReport> BindRequestITPartsReport(string iTRMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var iTRMasterIDParameter = iTRMasterID != null ?
                new ObjectParameter("ITRMasterID", iTRMasterID) :
                new ObjectParameter("ITRMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindRequestITPartsReport>("BindRequestITPartsReport", iTRMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetITRequestDetailsbyMasterID> GetITRequestDetailsbyMasterID(Nullable<long> requestITMasterID, Nullable<long> lockedBy, Nullable<long> lockTimeout)
        {
            var requestITMasterIDParameter = requestITMasterID.HasValue ?
                new ObjectParameter("RequestITMasterID", requestITMasterID) :
                new ObjectParameter("RequestITMasterID", typeof(long));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("LockTimeout", lockTimeout) :
                new ObjectParameter("LockTimeout", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetITRequestDetailsbyMasterID>("GetITRequestDetailsbyMasterID", requestITMasterIDParameter, lockedByParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<GetRequestITMaster> GetRequestITMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRequestITMaster>("GetRequestITMaster");
        }
    
        public virtual ObjectResult<SearchITRequest> SearchITRequest(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY, Nullable<bool> requestType)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchITRequest>("SearchITRequest", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter, requestTypeParameter);
        }
    
        public virtual ObjectResult<GetNonsuperAdminRequestITMaster> GetNonsuperAdminRequestITMaster(Nullable<long> corporateID, Nullable<long> facilityID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNonsuperAdminRequestITMaster>("GetNonsuperAdminRequestITMaster", corporateIDParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<BindEquipementsubcategoryFORIT> BindEquipementsubcategoryFORIT(Nullable<long> corporateID, string mode)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindEquipementsubcategoryFORIT>("BindEquipementsubcategoryFORIT", corporateIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<BindEquipementListFORIT> BindEquipementListFORIT(Nullable<long> equimentsubcategoryID, string mode)
        {
            var equimentsubcategoryIDParameter = equimentsubcategoryID.HasValue ?
                new ObjectParameter("EquimentsubcategoryID", equimentsubcategoryID) :
                new ObjectParameter("EquimentsubcategoryID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindEquipementListFORIT>("BindEquipementListFORIT", equimentsubcategoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetSerialNo> GetSerialNo(Nullable<long> equipmentSubCategoryID, Nullable<long> equipmentListID)
        {
            var equipmentSubCategoryIDParameter = equipmentSubCategoryID.HasValue ?
                new ObjectParameter("EquipmentSubCategoryID", equipmentSubCategoryID) :
                new ObjectParameter("EquipmentSubCategoryID", typeof(long));
    
            var equipmentListIDParameter = equipmentListID.HasValue ?
                new ObjectParameter("EquipmentListID", equipmentListID) :
                new ObjectParameter("EquipmentListID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSerialNo>("GetSerialNo", equipmentSubCategoryIDParameter, equipmentListIDParameter);
        }
    
        public virtual int DeleteITRDetails(Nullable<long> iTRDetailsID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var iTRDetailsIDParameter = iTRDetailsID.HasValue ?
                new ObjectParameter("ITRDetailsID", iTRDetailsID) :
                new ObjectParameter("ITRDetailsID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteITRDetails", iTRDetailsIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindCapitalItemRequestReport> BindCapitalItemRequestReport(string capitalItemMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID != null ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCapitalItemRequestReport>("BindCapitalItemRequestReport", capitalItemMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual int DeleteCapitalItemDetails(Nullable<long> capitalItemDetailsID, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var capitalItemDetailsIDParameter = capitalItemDetailsID.HasValue ?
                new ObjectParameter("CapitalItemDetailsID", capitalItemDetailsID) :
                new ObjectParameter("CapitalItemDetailsID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCapitalItemDetails", capitalItemDetailsIDParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual int DeleteCapitalItemMaster(Nullable<long> capitalItemMasterID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCapitalItemMaster", capitalItemMasterIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetCapitalItemDetails> GetCapitalItemDetails(Nullable<long> capitalItemMasterID, Nullable<long> lockedBy, Nullable<long> lockTimeout)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("LockTimeout", lockTimeout) :
                new ObjectParameter("LockTimeout", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapitalItemDetails>("GetCapitalItemDetails", capitalItemMasterIDParameter, lockedByParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<GetCapitalItemMaster> GetCapitalItemMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapitalItemMaster>("GetCapitalItemMaster");
        }
    
        public virtual ObjectResult<GetEquipementListforCapital> GetEquipementListforCapital(Nullable<long> equimentSubCategoryID, string mode)
        {
            var equimentSubCategoryIDParameter = equimentSubCategoryID.HasValue ?
                new ObjectParameter("EquimentSubCategoryID", equimentSubCategoryID) :
                new ObjectParameter("EquimentSubCategoryID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipementListforCapital>("GetEquipementListforCapital", equimentSubCategoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<GetEquipmentSubCategoryforCapital> GetEquipmentSubCategoryforCapital(Nullable<long> corporateID, string mode)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipmentSubCategoryforCapital>("GetEquipmentSubCategoryforCapital", corporateIDParameter, modeParameter);
        }
    
        public virtual int InsertCapitalItemDetails(Nullable<long> capitalItemMasterID, Nullable<long> equipmentSubCategory, Nullable<long> equipmentList, string serialNo, Nullable<decimal> pricePerUnit, Nullable<long> orderQuantity, Nullable<decimal> totalPrice, string reason, Nullable<long> createdBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var equipmentSubCategoryParameter = equipmentSubCategory.HasValue ?
                new ObjectParameter("EquipmentSubCategory", equipmentSubCategory) :
                new ObjectParameter("EquipmentSubCategory", typeof(long));
    
            var equipmentListParameter = equipmentList.HasValue ?
                new ObjectParameter("EquipmentList", equipmentList) :
                new ObjectParameter("EquipmentList", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var pricePerUnitParameter = pricePerUnit.HasValue ?
                new ObjectParameter("PricePerUnit", pricePerUnit) :
                new ObjectParameter("PricePerUnit", typeof(decimal));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCapitalItemDetails", capitalItemMasterIDParameter, equipmentSubCategoryParameter, equipmentListParameter, serialNoParameter, pricePerUnitParameter, orderQuantityParameter, totalPriceParameter, reasonParameter, createdByParameter);
        }
    
        public virtual int InsertCapitalItemMaster(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<bool> requestType, string shipping, string status, string shippingCost, string tax, Nullable<decimal> totalCost, string remarks, Nullable<long> createdBy, Nullable<long> approvedBy, Nullable<long> deniedBy, ObjectParameter capitalItemMasterID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(bool));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var approvedByParameter = approvedBy.HasValue ?
                new ObjectParameter("ApprovedBy", approvedBy) :
                new ObjectParameter("ApprovedBy", typeof(long));
    
            var deniedByParameter = deniedBy.HasValue ?
                new ObjectParameter("DeniedBy", deniedBy) :
                new ObjectParameter("DeniedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCapitalItemMaster", corporateIDParameter, facilityIDParameter, vendorIDParameter, requestTypeParameter, shippingParameter, statusParameter, shippingCostParameter, taxParameter, totalCostParameter, remarksParameter, createdByParameter, approvedByParameter, deniedByParameter, capitalItemMasterID);
        }
    
        public virtual ObjectResult<SearchCapitalItemRequestMaster> SearchCapitalItemRequestMaster(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCapitalItemRequestMaster>("SearchCapitalItemRequestMaster", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual int UpdateCapitalIemMaster(Nullable<long> capitalItemMasterID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<bool> requestType, string shipping, string shippingCost, string tax, Nullable<decimal> totalCost, Nullable<long> lastModifiedBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(bool));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCapitalIemMaster", capitalItemMasterIDParameter, corporateIDParameter, facilityIDParameter, vendorIDParameter, requestTypeParameter, shippingParameter, shippingCostParameter, taxParameter, totalCostParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateCapitalItemDetails(Nullable<long> capitalItemMasterID, Nullable<long> capitalItemDetailsID, Nullable<int> orderQuantity, Nullable<decimal> totalPrice, string reason, Nullable<long> lastModifiedBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var capitalItemDetailsIDParameter = capitalItemDetailsID.HasValue ?
                new ObjectParameter("CapitalItemDetailsID", capitalItemDetailsID) :
                new ObjectParameter("CapitalItemDetailsID", typeof(long));
    
            var orderQuantityParameter = orderQuantity.HasValue ?
                new ObjectParameter("OrderQuantity", orderQuantity) :
                new ObjectParameter("OrderQuantity", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCapitalItemDetails", capitalItemMasterIDParameter, capitalItemDetailsIDParameter, orderQuantityParameter, totalPriceParameter, reasonParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindEquipement> BindEquipement(string searchEquipement, string isActive, string mode, Nullable<long> loggedinBy, string filter)
        {
            var searchEquipementParameter = searchEquipement != null ?
                new ObjectParameter("SearchEquipement", searchEquipement) :
                new ObjectParameter("SearchEquipement", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindEquipement>("BindEquipement", searchEquipementParameter, isActiveParameter, modeParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int DeleteEquipSubCategoryMaster(Nullable<long> equipeSubCategoryID, Nullable<long> lastModitifiedBy)
        {
            var equipeSubCategoryIDParameter = equipeSubCategoryID.HasValue ?
                new ObjectParameter("EquipeSubCategoryID", equipeSubCategoryID) :
                new ObjectParameter("EquipeSubCategoryID", typeof(long));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEquipSubCategoryMaster", equipeSubCategoryIDParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<GetActiveEquipementSubCategoryvalue> GetActiveEquipementSubCategoryvalue(Nullable<long> equipmentSubCategoryID)
        {
            var equipmentSubCategoryIDParameter = equipmentSubCategoryID.HasValue ?
                new ObjectParameter("EquipmentSubCategoryID", equipmentSubCategoryID) :
                new ObjectParameter("EquipmentSubCategoryID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveEquipementSubCategoryvalue>("GetActiveEquipementSubCategoryvalue", equipmentSubCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetEquipementSubCategory> GetEquipementSubCategory(Nullable<long> equipementCategoryID, string mode)
        {
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEquipementSubCategory>("GetEquipementSubCategory", equipementCategoryIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<BindEquipementSubCategoryReport> BindEquipementSubCategoryReport(string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindEquipementSubCategoryReport>("BindEquipementSubCategoryReport", searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SavedEquipmentSubCategory> SavedEquipmentSubCategory(Nullable<long> equSubCatID)
        {
            var equSubCatIDParameter = equSubCatID.HasValue ?
                new ObjectParameter("EquSubCatID", equSubCatID) :
                new ObjectParameter("EquSubCatID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SavedEquipmentSubCategory>("SavedEquipmentSubCategory", equSubCatIDParameter);
        }
    
        public virtual int InsertEquipmentSubCategory(Nullable<long> equipementCategoryID, string equipSubCategoryDesc, Nullable<long> createdBy)
        {
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var equipSubCategoryDescParameter = equipSubCategoryDesc != null ?
                new ObjectParameter("EquipSubCategoryDesc", equipSubCategoryDesc) :
                new ObjectParameter("EquipSubCategoryDesc", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEquipmentSubCategory", equipementCategoryIDParameter, equipSubCategoryDescParameter, createdByParameter);
        }
    
        public virtual int UpdateEquipmentSubCategory(Nullable<long> equipementSubCategoryID, Nullable<long> equipementCategoryID, string equipSubCategoryDesc, Nullable<long> lastModifiedBy)
        {
            var equipementSubCategoryIDParameter = equipementSubCategoryID.HasValue ?
                new ObjectParameter("EquipementSubCategoryID", equipementSubCategoryID) :
                new ObjectParameter("EquipementSubCategoryID", typeof(long));
    
            var equipementCategoryIDParameter = equipementCategoryID.HasValue ?
                new ObjectParameter("EquipementCategoryID", equipementCategoryID) :
                new ObjectParameter("EquipementCategoryID", typeof(long));
    
            var equipSubCategoryDescParameter = equipSubCategoryDesc != null ?
                new ObjectParameter("EquipSubCategoryDesc", equipSubCategoryDesc) :
                new ObjectParameter("EquipSubCategoryDesc", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipmentSubCategory", equipementSubCategoryIDParameter, equipementCategoryIDParameter, equipSubCategoryDescParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GETITRequestPODetails> GETITRequestPODetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETITRequestPODetails>("GETITRequestPODetails");
        }
    
        public virtual ObjectResult<SearchRequestITPO> SearchRequestITPO(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRequestITPO>("SearchRequestITPO", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetUserApprovePermission> GetUserApprovePermission(Nullable<long> mainMenuID, Nullable<long> subMenuID)
        {
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserApprovePermission>("GetUserApprovePermission", mainMenuIDParameter, subMenuIDParameter);
        }
    
        public virtual int InsertUserApprovePermission(Nullable<long> userRoleID, Nullable<long> mainMenuID, Nullable<long> subMenuID, string pageName, Nullable<bool> isEdit, Nullable<bool> isViewOnly, Nullable<bool> isApprove, Nullable<bool> isDeny, Nullable<bool> isOrder, Nullable<decimal> approveRangeFrom, Nullable<decimal> approveRangeTo, string multiRole, Nullable<long> createdBy)
        {
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var isEditParameter = isEdit.HasValue ?
                new ObjectParameter("IsEdit", isEdit) :
                new ObjectParameter("IsEdit", typeof(bool));
    
            var isViewOnlyParameter = isViewOnly.HasValue ?
                new ObjectParameter("IsViewOnly", isViewOnly) :
                new ObjectParameter("IsViewOnly", typeof(bool));
    
            var isApproveParameter = isApprove.HasValue ?
                new ObjectParameter("IsApprove", isApprove) :
                new ObjectParameter("IsApprove", typeof(bool));
    
            var isDenyParameter = isDeny.HasValue ?
                new ObjectParameter("IsDeny", isDeny) :
                new ObjectParameter("IsDeny", typeof(bool));
    
            var isOrderParameter = isOrder.HasValue ?
                new ObjectParameter("IsOrder", isOrder) :
                new ObjectParameter("IsOrder", typeof(bool));
    
            var approveRangeFromParameter = approveRangeFrom.HasValue ?
                new ObjectParameter("ApproveRangeFrom", approveRangeFrom) :
                new ObjectParameter("ApproveRangeFrom", typeof(decimal));
    
            var approveRangeToParameter = approveRangeTo.HasValue ?
                new ObjectParameter("ApproveRangeTo", approveRangeTo) :
                new ObjectParameter("ApproveRangeTo", typeof(decimal));
    
            var multiRoleParameter = multiRole != null ?
                new ObjectParameter("MultiRole", multiRole) :
                new ObjectParameter("MultiRole", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserApprovePermission", userRoleIDParameter, mainMenuIDParameter, subMenuIDParameter, pageNameParameter, isEditParameter, isViewOnlyParameter, isApproveParameter, isDenyParameter, isOrderParameter, approveRangeFromParameter, approveRangeToParameter, multiRoleParameter, createdByParameter);
        }
    
        public virtual int UpdateUserApprovePermission(Nullable<long> userPermissionID, Nullable<long> userRoleID, Nullable<long> mainMenuID, Nullable<long> subMenuID, string pageName, Nullable<bool> isEdit, Nullable<bool> isViewOnly, Nullable<bool> isApprove, Nullable<bool> isDeny, Nullable<bool> isOrder, Nullable<decimal> approveRangeFrom, Nullable<decimal> approveRangeTo, string multiRole, Nullable<long> lastModifiedBy)
        {
            var userPermissionIDParameter = userPermissionID.HasValue ?
                new ObjectParameter("UserPermissionID", userPermissionID) :
                new ObjectParameter("UserPermissionID", typeof(long));
    
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var mainMenuIDParameter = mainMenuID.HasValue ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(long));
    
            var subMenuIDParameter = subMenuID.HasValue ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(long));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var isEditParameter = isEdit.HasValue ?
                new ObjectParameter("IsEdit", isEdit) :
                new ObjectParameter("IsEdit", typeof(bool));
    
            var isViewOnlyParameter = isViewOnly.HasValue ?
                new ObjectParameter("IsViewOnly", isViewOnly) :
                new ObjectParameter("IsViewOnly", typeof(bool));
    
            var isApproveParameter = isApprove.HasValue ?
                new ObjectParameter("IsApprove", isApprove) :
                new ObjectParameter("IsApprove", typeof(bool));
    
            var isDenyParameter = isDeny.HasValue ?
                new ObjectParameter("IsDeny", isDeny) :
                new ObjectParameter("IsDeny", typeof(bool));
    
            var isOrderParameter = isOrder.HasValue ?
                new ObjectParameter("IsOrder", isOrder) :
                new ObjectParameter("IsOrder", typeof(bool));
    
            var approveRangeFromParameter = approveRangeFrom.HasValue ?
                new ObjectParameter("ApproveRangeFrom", approveRangeFrom) :
                new ObjectParameter("ApproveRangeFrom", typeof(decimal));
    
            var approveRangeToParameter = approveRangeTo.HasValue ?
                new ObjectParameter("ApproveRangeTo", approveRangeTo) :
                new ObjectParameter("ApproveRangeTo", typeof(decimal));
    
            var multiRoleParameter = multiRole != null ?
                new ObjectParameter("MultiRole", multiRole) :
                new ObjectParameter("MultiRole", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserApprovePermission", userPermissionIDParameter, userRoleIDParameter, mainMenuIDParameter, subMenuIDParameter, pageNameParameter, isEditParameter, isViewOnlyParameter, isApproveParameter, isDenyParameter, isOrderParameter, approveRangeFromParameter, approveRangeToParameter, multiRoleParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindRequestITDetailsfromPO> BindRequestITDetailsfromPO(string iTRNO)
        {
            var iTRNOParameter = iTRNO != null ?
                new ObjectParameter("ITRNO", iTRNO) :
                new ObjectParameter("ITRNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindRequestITDetailsfromPO>("BindRequestITDetailsfromPO", iTRNOParameter);
        }
    
        public virtual int InsertrequestPO(Nullable<long> requestITMasterID, string iTRNo, string status, string remarks, Nullable<int> sortOrder, byte[] orderContent, Nullable<long> createdBy, Nullable<long> lastModifiedBy, Nullable<long> facilityID)
        {
            var requestITMasterIDParameter = requestITMasterID.HasValue ?
                new ObjectParameter("RequestITMasterID", requestITMasterID) :
                new ObjectParameter("RequestITMasterID", typeof(long));
    
            var iTRNoParameter = iTRNo != null ?
                new ObjectParameter("ITRNo", iTRNo) :
                new ObjectParameter("ITRNo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertrequestPO", requestITMasterIDParameter, iTRNoParameter, statusParameter, remarksParameter, sortOrderParameter, orderContentParameter, createdByParameter, lastModifiedByParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<GetMedicalRequestPODetails> GetMedicalRequestPODetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicalRequestPODetails>("GetMedicalRequestPODetails");
        }
    
        public virtual ObjectResult<GetMSROrderContentPO> GetMSROrderContentPO(Nullable<long> medicalSuppliesID, Nullable<long> loggedinBy)
        {
            var medicalSuppliesIDParameter = medicalSuppliesID.HasValue ?
                new ObjectParameter("MedicalSuppliesID", medicalSuppliesID) :
                new ObjectParameter("MedicalSuppliesID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMSROrderContentPO>("GetMSROrderContentPO", medicalSuppliesIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchMedicalSupplyRequestPo> SearchMedicalSupplyRequestPo(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMedicalSupplyRequestPo>("SearchMedicalSupplyRequestPo", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual int InsertMedicalsupplyPO(Nullable<long> pRMasterID, string pONo, string status, string remarks, byte[] orderContent, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMedicalsupplyPO", pRMasterIDParameter, pONoParameter, statusParameter, remarksParameter, orderContentParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual int InsertMultiRoleApprove(Nullable<long> permissionID, string userRoleID, Nullable<long> createdBy)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var userRoleIDParameter = userRoleID != null ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMultiRoleApprove", permissionIDParameter, userRoleIDParameter, createdByParameter);
        }
    
        public virtual int UpdateMultiRoleApprove(Nullable<long> permissionID, string userRoleID, Nullable<decimal> approveRangeFrom, Nullable<decimal> approveRangeTo, Nullable<long> modifiedBy)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var userRoleIDParameter = userRoleID != null ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(string));
    
            var approveRangeFromParameter = approveRangeFrom.HasValue ?
                new ObjectParameter("ApproveRangeFrom", approveRangeFrom) :
                new ObjectParameter("ApproveRangeFrom", typeof(decimal));
    
            var approveRangeToParameter = approveRangeTo.HasValue ?
                new ObjectParameter("ApproveRangeTo", approveRangeTo) :
                new ObjectParameter("ApproveRangeTo", typeof(decimal));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMultiRoleApprove", permissionIDParameter, userRoleIDParameter, approveRangeFromParameter, approveRangeToParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<GetServiceRequestPODetails> GetServiceRequestPODetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestPODetails>("GetServiceRequestPODetails");
        }
    
        public virtual ObjectResult<SearchServiceRequestPO> SearchServiceRequestPO(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchServiceRequestPO>("SearchServiceRequestPO", corporateIDParameter, facilityIDParameter, dateFromParameter, dateToParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetMultiUserApprove> GetMultiUserApprove(Nullable<long> permissionID)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMultiUserApprove>("GetMultiUserApprove", permissionIDParameter);
        }
    
        public virtual ObjectResult<GetMPOrderContentPO> GetMPOrderContentPO(Nullable<long> mPRMasterID, Nullable<long> loggedinBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMPOrderContentPO>("GetMPOrderContentPO", mPRMasterIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetMPRMasterOrder> GetMPRMasterOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMPRMasterOrder>("GetMPRMasterOrder");
        }
    
        public virtual int InsertMachinePO(Nullable<long> mPRMasterID, string mPONo, string status, string remarks, byte[] orderContent, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var mPONoParameter = mPONo != null ?
                new ObjectParameter("MPONo", mPONo) :
                new ObjectParameter("MPONo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMachinePO", mPRMasterIDParameter, mPONoParameter, statusParameter, remarksParameter, orderContentParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<SearchMPRMasterOrder> SearchMPRMasterOrder(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMPRMasterOrder>("SearchMPRMasterOrder", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetCROrderContentPO> GetCROrderContentPO(Nullable<long> capitalItemMasterID, Nullable<long> loggedinBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCROrderContentPO>("GetCROrderContentPO", capitalItemMasterIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchCapitalPO> SearchCapitalPO(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCapitalPO>("SearchCapitalPO", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetITROrderContentPO> GetITROrderContentPO(Nullable<long> requestITMasterID, Nullable<long> loggedinBy)
        {
            var requestITMasterIDParameter = requestITMasterID.HasValue ?
                new ObjectParameter("RequestITMasterID", requestITMasterID) :
                new ObjectParameter("RequestITMasterID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetITROrderContentPO>("GetITROrderContentPO", requestITMasterIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetMedicalSupplyPoReportDetails> GetMedicalSupplyPoReportDetails(string medicalSupplyID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var medicalSupplyIDParameter = medicalSupplyID != null ?
                new ObjectParameter("MedicalSupplyID", medicalSupplyID) :
                new ObjectParameter("MedicalSupplyID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicalSupplyPoReportDetails>("GetMedicalSupplyPoReportDetails", medicalSupplyIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<BindITRequestPOReport> BindITRequestPOReport(string requestITMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var requestITMasterIDParameter = requestITMasterID != null ?
                new ObjectParameter("RequestITMasterID", requestITMasterID) :
                new ObjectParameter("RequestITMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindITRequestPOReport>("BindITRequestPOReport", requestITMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual int UpdateITRequestPO(Nullable<long> requestITOrderID, byte[] orderContent, Nullable<long> lastModifiedBy)
        {
            var requestITOrderIDParameter = requestITOrderID.HasValue ?
                new ObjectParameter("RequestITOrderID", requestITOrderID) :
                new ObjectParameter("RequestITOrderID", typeof(long));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateITRequestPO", requestITOrderIDParameter, orderContentParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMSRPoOrderContent(Nullable<long> pRMasterID, byte[] orderContent, Nullable<long> lastModifiedBy)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMSRPoOrderContent", pRMasterIDParameter, orderContentParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMSRPoStatus(Nullable<long> pRMasterID, string status, string remarks, Nullable<long> lastModifiedBy)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMSRPoStatus", pRMasterIDParameter, statusParameter, remarksParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetCapitalPOReport> GetCapitalPOReport(string capitalItemMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID != null ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapitalPOReport>("GetCapitalPOReport", capitalItemMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual int UpdateCRPOOrderContent(Nullable<long> capitalItemMasterID, byte[] orderContent, Nullable<long> lastModifiedBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCRPOOrderContent", capitalItemMasterIDParameter, orderContentParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateServiceRequestDetailsAfterAction(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, string status, string action, string remarks, Nullable<long> lastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceRequestDetailsAfterAction", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, statusParameter, actionParameter, remarksParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindMachinePOReport> BindMachinePOReport(string mPRMasterID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedInBy)
        {
            var mPRMasterIDParameter = mPRMasterID != null ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedInByParameter = loggedInBy.HasValue ?
                new ObjectParameter("LoggedInBy", loggedInBy) :
                new ObjectParameter("LoggedInBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMachinePOReport>("BindMachinePOReport", mPRMasterIDParameter, searchFiltersParameter, lockedByParameter, loggedInByParameter);
        }
    
        public virtual int UpdateMPRPoStatus(Nullable<long> mPRMasterID, string status, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMPRPoStatus", mPRMasterIDParameter, statusParameter, lastModifiedByParameter);
        }
    
        public virtual int UpdateMachinePO(Nullable<long> mPRMasterID, byte[] orderContent, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMachinePO", mPRMasterIDParameter, orderContentParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetServiceRequestPOGenerateDetails> GetServiceRequestPOGenerateDetails(string listServiceRequestID, Nullable<long> loggedinBy)
        {
            var listServiceRequestIDParameter = listServiceRequestID != null ?
                new ObjectParameter("ListServiceRequestID", listServiceRequestID) :
                new ObjectParameter("ListServiceRequestID", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestPOGenerateDetails>("GetServiceRequestPOGenerateDetails", listServiceRequestIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetRwdlsafterordergeneration> GetRwdlsafterordergeneration(string iTRequestMasterID)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID != null ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRwdlsafterordergeneration>("GetRwdlsafterordergeneration", iTRequestMasterIDParameter);
        }
    
        public virtual ObjectResult<GetCapitalOrderCPONo> GetCapitalOrderCPONo(string capitalItemMasterID)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID != null ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCapitalOrderCPONo>("GetCapitalOrderCPONo", capitalItemMasterIDParameter);
        }
    
        public virtual int InsertCapitalApprove(Nullable<long> capitalItemMasterID, string status, string remarks, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCapitalApprove", capitalItemMasterIDParameter, statusParameter, remarksParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetServiceRequestPoReportDetails> GetServiceRequestPoReportDetails(string serviceRequestID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var serviceRequestIDParameter = serviceRequestID != null ?
                new ObjectParameter("ServiceRequestID", serviceRequestID) :
                new ObjectParameter("ServiceRequestID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestPoReportDetails>("GetServiceRequestPoReportDetails", serviceRequestIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetSROrderContentPOReports> GetSROrderContentPOReports(Nullable<long> serviceRequestID, Nullable<long> serviceRequestDetailsID, Nullable<long> loggedinBy)
        {
            var serviceRequestIDParameter = serviceRequestID.HasValue ?
                new ObjectParameter("ServiceRequestID", serviceRequestID) :
                new ObjectParameter("ServiceRequestID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSROrderContentPOReports>("GetSROrderContentPOReports", serviceRequestIDParameter, serviceRequestDetailsIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetServiceRequestActionByMasterID> GetServiceRequestActionByMasterID(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailID)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailIDParameter = serviceRequestDetailID.HasValue ?
                new ObjectParameter("ServiceRequestDetailID", serviceRequestDetailID) :
                new ObjectParameter("ServiceRequestDetailID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceRequestActionByMasterID>("GetServiceRequestActionByMasterID", serviceRequestMasterIDParameter, serviceRequestDetailIDParameter);
        }
    
        public virtual int InsertServiceRequestApproveAction(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, string action, string remarks, Nullable<long> createdBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServiceRequestApproveAction", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, actionParameter, remarksParameter, createdByParameter);
        }
    
        public virtual int InsertServcieRequestGenerateOrder(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, string status, string remarks, Nullable<long> createdBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertServcieRequestGenerateOrder", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, statusParameter, remarksParameter, createdByParameter);
        }
    
        public virtual int InsertMachineApprove(Nullable<long> mPRMasterID, string status, string remarks, Nullable<long> createdBy, Nullable<long> lastModifiedBy)
        {
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMachineApprove", mPRMasterIDParameter, statusParameter, remarksParameter, createdByParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetMachinePartsOrderMPONo> GetMachinePartsOrderMPONo(string mPRMasterID)
        {
            var mPRMasterIDParameter = mPRMasterID != null ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachinePartsOrderMPONo>("GetMachinePartsOrderMPONo", mPRMasterIDParameter);
        }
    
        public virtual int UpdateServiceRequestApproveAction(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, string status, string remarks, Nullable<long> lastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServiceRequestApproveAction", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, statusParameter, remarksParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<SearchServiceRequestPurchaseOrder> SearchServiceRequestPurchaseOrder(string corporateID, string facilityID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchServiceRequestPurchaseOrder>("SearchServiceRequestPurchaseOrder", corporateIDParameter, facilityIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchServiceRequestPurchaseOrderDetails> SearchServiceRequestPurchaseOrderDetails(Nullable<long> serviceRequestMasterID, Nullable<long> loggedinBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchServiceRequestPurchaseOrderDetails>("SearchServiceRequestPurchaseOrderDetails", serviceRequestMasterIDParameter, loggedinByParameter);
        }
    
        public virtual int UpdateServcieRequestGenerateOrder(Nullable<long> serviceRequestMasterID, byte[] orderContent, Nullable<long> lastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServcieRequestGenerateOrder", serviceRequestMasterIDParameter, orderContentParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetMSRMultipleIDs> GetMSRMultipleIDs(string pRMasterID)
        {
            var pRMasterIDParameter = pRMasterID != null ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMSRMultipleIDs>("GetMSRMultipleIDs", pRMasterIDParameter);
        }
    
        public virtual ObjectResult<BindMultiRolesPermission> BindMultiRolesPermission(string listofUserId, Nullable<long> permissionID)
        {
            var listofUserIdParameter = listofUserId != null ?
                new ObjectParameter("ListofUserId", listofUserId) :
                new ObjectParameter("ListofUserId", typeof(string));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMultiRolesPermission>("BindMultiRolesPermission", listofUserIdParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<GetCorporateFacilityByUserID> GetCorporateFacilityByUserID(Nullable<long> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCorporateFacilityByUserID>("GetCorporateFacilityByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<GetSuperAdminDetails> GetSuperAdminDetails(Nullable<long> corporateID, Nullable<long> facilityID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuperAdminDetails>("GetSuperAdminDetails", corporateIDParameter, facilityIDParameter);
        }
    
        public virtual int InsertCapitalPO(Nullable<long> capitalItemMasterID, string cRONo, string status, string remarks, byte[] orderContent, Nullable<long> createdBy)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var cRONoParameter = cRONo != null ?
                new ObjectParameter("CRONo", cRONo) :
                new ObjectParameter("CRONo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var orderContentParameter = orderContent != null ?
                new ObjectParameter("OrderContent", orderContent) :
                new ObjectParameter("OrderContent", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCapitalPO", capitalItemMasterIDParameter, cRONoParameter, statusParameter, remarksParameter, orderContentParameter, createdByParameter);
        }
    
        public virtual int DeleteSRTempAttch(Nullable<int> sINO, string mode)
        {
            var sINOParameter = sINO.HasValue ?
                new ObjectParameter("SINO", sINO) :
                new ObjectParameter("SINO", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSRTempAttch", sINOParameter, modeParameter);
        }
    
        public virtual int InsertSRTempAttch(Nullable<int> sINO, string locationOfTheFile, Nullable<long> uploadedBy, string description, string fileName, Nullable<long> createdBy)
        {
            var sINOParameter = sINO.HasValue ?
                new ObjectParameter("SINO", sINO) :
                new ObjectParameter("SINO", typeof(int));
    
            var locationOfTheFileParameter = locationOfTheFile != null ?
                new ObjectParameter("LocationOfTheFile", locationOfTheFile) :
                new ObjectParameter("LocationOfTheFile", typeof(string));
    
            var uploadedByParameter = uploadedBy.HasValue ?
                new ObjectParameter("UploadedBy", uploadedBy) :
                new ObjectParameter("UploadedBy", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSRTempAttch", sINOParameter, locationOfTheFileParameter, uploadedByParameter, descriptionParameter, fileNameParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetServiceTempAttachment> GetServiceTempAttachment(Nullable<int> sINO)
        {
            var sINOParameter = sINO.HasValue ?
                new ObjectParameter("SINO", sINO) :
                new ObjectParameter("SINO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceTempAttachment>("GetServiceTempAttachment", sINOParameter);
        }
    
        public virtual int TruncateSRTempAttch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TruncateSRTempAttch");
        }
    
        public virtual int InsertMultiPermissionApprove(Nullable<long> permissionID, Nullable<long> userRoleID, Nullable<decimal> approveRangeFrom, Nullable<decimal> approveRangeTo, Nullable<bool> isActive, Nullable<int> approveorder, Nullable<long> createdBy)
        {
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var userRoleIDParameter = userRoleID.HasValue ?
                new ObjectParameter("UserRoleID", userRoleID) :
                new ObjectParameter("UserRoleID", typeof(long));
    
            var approveRangeFromParameter = approveRangeFrom.HasValue ?
                new ObjectParameter("ApproveRangeFrom", approveRangeFrom) :
                new ObjectParameter("ApproveRangeFrom", typeof(decimal));
    
            var approveRangeToParameter = approveRangeTo.HasValue ?
                new ObjectParameter("ApproveRangeTo", approveRangeTo) :
                new ObjectParameter("ApproveRangeTo", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var approveorderParameter = approveorder.HasValue ?
                new ObjectParameter("Approveorder", approveorder) :
                new ObjectParameter("Approveorder", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMultiPermissionApprove", permissionIDParameter, userRoleIDParameter, approveRangeFromParameter, approveRangeToParameter, isActiveParameter, approveorderParameter, createdByParameter);
        }
    
        public virtual int UpdateMultiPermissionApprove(Nullable<long> pageMasterPermissionMultiRoleID, Nullable<long> permissionID, Nullable<int> approveorder, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var pageMasterPermissionMultiRoleIDParameter = pageMasterPermissionMultiRoleID.HasValue ?
                new ObjectParameter("PageMasterPermissionMultiRoleID", pageMasterPermissionMultiRoleID) :
                new ObjectParameter("PageMasterPermissionMultiRoleID", typeof(long));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(long));
    
            var approveorderParameter = approveorder.HasValue ?
                new ObjectParameter("Approveorder", approveorder) :
                new ObjectParameter("Approveorder", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMultiPermissionApprove", pageMasterPermissionMultiRoleIDParameter, permissionIDParameter, approveorderParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindITNNOvalues> BindITNNOvalues(Nullable<long> iTReceivingMasterID)
        {
            var iTReceivingMasterIDParameter = iTReceivingMasterID.HasValue ?
                new ObjectParameter("ITReceivingMasterID", iTReceivingMasterID) :
                new ObjectParameter("ITReceivingMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindITNNOvalues>("BindITNNOvalues", iTReceivingMasterIDParameter);
        }
    
        public virtual ObjectResult<SearchITReceiving> SearchITReceiving(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchITReceiving>("SearchITReceiving", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchCapitalReceivingMaster> SearchCapitalReceivingMaster(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCapitalReceivingMaster>("SearchCapitalReceivingMaster", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchServiceRequestReceivingOrder> SearchServiceRequestReceivingOrder(string corporateID, string facilityID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchServiceRequestReceivingOrder>("SearchServiceRequestReceivingOrder", corporateIDParameter, facilityIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual int SyncServiceReceivingorder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncServiceReceivingorder");
        }
    
        public virtual int UpdateServcieRecevinginvoice(Nullable<long> serviceRequestMasterID, string invoiceNo, string invoiceStatus, string invoiceRemarks, Nullable<long> invoiceLastModifiedBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoiceRemarksParameter = invoiceRemarks != null ?
                new ObjectParameter("InvoiceRemarks", invoiceRemarks) :
                new ObjectParameter("InvoiceRemarks", typeof(string));
    
            var invoiceLastModifiedByParameter = invoiceLastModifiedBy.HasValue ?
                new ObjectParameter("InvoiceLastModifiedBy", invoiceLastModifiedBy) :
                new ObjectParameter("InvoiceLastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServcieRecevinginvoice", serviceRequestMasterIDParameter, invoiceNoParameter, invoiceStatusParameter, invoiceRemarksParameter, invoiceLastModifiedByParameter);
        }
    
        public virtual int UpdateServcieRecevingOrder(Nullable<long> serviceRequestMasterID, string status, string remarks, string otherRemarks, Nullable<bool> isReceive, Nullable<long> createdBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var otherRemarksParameter = otherRemarks != null ?
                new ObjectParameter("OtherRemarks", otherRemarks) :
                new ObjectParameter("OtherRemarks", typeof(string));
    
            var isReceiveParameter = isReceive.HasValue ?
                new ObjectParameter("IsReceive", isReceive) :
                new ObjectParameter("IsReceive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServcieRecevingOrder", serviceRequestMasterIDParameter, statusParameter, remarksParameter, otherRemarksParameter, isReceiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<UpdateCapitalRecevingMaster> UpdateCapitalRecevingMaster(Nullable<long> capitalReceivingMasterID, Nullable<long> capitalItemMasterID, Nullable<long> capitalOrderID, string cRONo, string packingilpNo, Nullable<System.DateTime> packingDate, Nullable<System.DateTime> receivedDate, string invoiceNo, string invoiceStatus, Nullable<long> invoicedBy, Nullable<System.DateTime> invoiceDate, string receivingAction, string reason, string otherReason, string finalStatus, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER, string shippingCost, string tax, Nullable<decimal> totalCost)
        {
            var capitalReceivingMasterIDParameter = capitalReceivingMasterID.HasValue ?
                new ObjectParameter("CapitalReceivingMasterID", capitalReceivingMasterID) :
                new ObjectParameter("CapitalReceivingMasterID", typeof(long));
    
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var capitalOrderIDParameter = capitalOrderID.HasValue ?
                new ObjectParameter("CapitalOrderID", capitalOrderID) :
                new ObjectParameter("CapitalOrderID", typeof(long));
    
            var cRONoParameter = cRONo != null ?
                new ObjectParameter("CRONo", cRONo) :
                new ObjectParameter("CRONo", typeof(string));
    
            var packingilpNoParameter = packingilpNo != null ?
                new ObjectParameter("PackingilpNo", packingilpNo) :
                new ObjectParameter("PackingilpNo", typeof(string));
    
            var packingDateParameter = packingDate.HasValue ?
                new ObjectParameter("PackingDate", packingDate) :
                new ObjectParameter("PackingDate", typeof(System.DateTime));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoicedByParameter = invoicedBy.HasValue ?
                new ObjectParameter("InvoicedBy", invoicedBy) :
                new ObjectParameter("InvoicedBy", typeof(long));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var receivingActionParameter = receivingAction != null ?
                new ObjectParameter("ReceivingAction", receivingAction) :
                new ObjectParameter("ReceivingAction", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateCapitalRecevingMaster>("UpdateCapitalRecevingMaster", capitalReceivingMasterIDParameter, capitalItemMasterIDParameter, capitalOrderIDParameter, cRONoParameter, packingilpNoParameter, packingDateParameter, receivedDateParameter, invoiceNoParameter, invoiceStatusParameter, invoicedByParameter, invoiceDateParameter, receivingActionParameter, reasonParameter, otherReasonParameter, finalStatusParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter, shippingCostParameter, taxParameter, totalCostParameter);
        }
    
        public virtual int SyncCapitalReceivingorder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncCapitalReceivingorder");
        }
    
        public virtual int UpdateCapitalReceivingDetails(Nullable<long> capitalReceivingDetailsID, Nullable<long> capitalReceivingMasterID, Nullable<long> capitalItemMasterID, string finalStatus, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER, Nullable<long> iNSERTRECORDID, Nullable<int> balanceQty, Nullable<int> receivedQty, Nullable<decimal> totalPrice, string comments)
        {
            var capitalReceivingDetailsIDParameter = capitalReceivingDetailsID.HasValue ?
                new ObjectParameter("CapitalReceivingDetailsID", capitalReceivingDetailsID) :
                new ObjectParameter("CapitalReceivingDetailsID", typeof(long));
    
            var capitalReceivingMasterIDParameter = capitalReceivingMasterID.HasValue ?
                new ObjectParameter("CapitalReceivingMasterID", capitalReceivingMasterID) :
                new ObjectParameter("CapitalReceivingMasterID", typeof(long));
    
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var iNSERTRECORDIDParameter = iNSERTRECORDID.HasValue ?
                new ObjectParameter("INSERTRECORDID", iNSERTRECORDID) :
                new ObjectParameter("INSERTRECORDID", typeof(long));
    
            var balanceQtyParameter = balanceQty.HasValue ?
                new ObjectParameter("BalanceQty", balanceQty) :
                new ObjectParameter("BalanceQty", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCapitalReceivingDetails", capitalReceivingDetailsIDParameter, capitalReceivingMasterIDParameter, capitalItemMasterIDParameter, finalStatusParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter, iNSERTRECORDIDParameter, balanceQtyParameter, receivedQtyParameter, totalPriceParameter, commentsParameter);
        }
    
        public virtual int InsertITReceivingMaster(Nullable<long> iTRequestMasterID, Nullable<long> facilityID, string packingSlipNo, Nullable<System.DateTime> packingDate, Nullable<System.DateTime> receivedDate, string invoiceNO, Nullable<System.DateTime> invoiceDate, string receivingaction, string reason, string finalStatus, Nullable<long> createdBy, string invoiceStatus, Nullable<long> invoicedBy, Nullable<long> partialBy, Nullable<System.DateTime> partialOn, Nullable<long> voidBy, Nullable<System.DateTime> voidOn, Nullable<long> closedBy, Nullable<System.DateTime> closedOn, ObjectParameter iTReceivingMasterID)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var packingSlipNoParameter = packingSlipNo != null ?
                new ObjectParameter("PackingSlipNo", packingSlipNo) :
                new ObjectParameter("PackingSlipNo", typeof(string));
    
            var packingDateParameter = packingDate.HasValue ?
                new ObjectParameter("PackingDate", packingDate) :
                new ObjectParameter("PackingDate", typeof(System.DateTime));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var invoiceNOParameter = invoiceNO != null ?
                new ObjectParameter("InvoiceNO", invoiceNO) :
                new ObjectParameter("InvoiceNO", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var receivingactionParameter = receivingaction != null ?
                new ObjectParameter("Receivingaction", receivingaction) :
                new ObjectParameter("Receivingaction", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoicedByParameter = invoicedBy.HasValue ?
                new ObjectParameter("InvoicedBy", invoicedBy) :
                new ObjectParameter("InvoicedBy", typeof(long));
    
            var partialByParameter = partialBy.HasValue ?
                new ObjectParameter("PartialBy", partialBy) :
                new ObjectParameter("PartialBy", typeof(long));
    
            var partialOnParameter = partialOn.HasValue ?
                new ObjectParameter("PartialOn", partialOn) :
                new ObjectParameter("PartialOn", typeof(System.DateTime));
    
            var voidByParameter = voidBy.HasValue ?
                new ObjectParameter("VoidBy", voidBy) :
                new ObjectParameter("VoidBy", typeof(long));
    
            var voidOnParameter = voidOn.HasValue ?
                new ObjectParameter("VoidOn", voidOn) :
                new ObjectParameter("VoidOn", typeof(System.DateTime));
    
            var closedByParameter = closedBy.HasValue ?
                new ObjectParameter("ClosedBy", closedBy) :
                new ObjectParameter("ClosedBy", typeof(long));
    
            var closedOnParameter = closedOn.HasValue ?
                new ObjectParameter("ClosedOn", closedOn) :
                new ObjectParameter("ClosedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertITReceivingMaster", iTRequestMasterIDParameter, facilityIDParameter, packingSlipNoParameter, packingDateParameter, receivedDateParameter, invoiceNOParameter, invoiceDateParameter, receivingactionParameter, reasonParameter, finalStatusParameter, createdByParameter, invoiceStatusParameter, invoicedByParameter, partialByParameter, partialOnParameter, voidByParameter, voidOnParameter, closedByParameter, closedOnParameter, iTReceivingMasterID);
        }
    
        public virtual int InsertITReceivingDetails(Nullable<long> iTReceivingMasterID, Nullable<long> iTRequestMasterID, Nullable<long> equipmentsubcategory, Nullable<long> equipmentlist, string serialNo, Nullable<decimal> priceperQty, Nullable<int> orederQty, Nullable<int> balanceQty, Nullable<int> receivingQty, Nullable<decimal> totalPrice, string comments, string shippingCost, string tax, Nullable<decimal> totalCost, Nullable<long> createdBy)
        {
            var iTReceivingMasterIDParameter = iTReceivingMasterID.HasValue ?
                new ObjectParameter("ITReceivingMasterID", iTReceivingMasterID) :
                new ObjectParameter("ITReceivingMasterID", typeof(long));
    
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var equipmentsubcategoryParameter = equipmentsubcategory.HasValue ?
                new ObjectParameter("Equipmentsubcategory", equipmentsubcategory) :
                new ObjectParameter("Equipmentsubcategory", typeof(long));
    
            var equipmentlistParameter = equipmentlist.HasValue ?
                new ObjectParameter("Equipmentlist", equipmentlist) :
                new ObjectParameter("Equipmentlist", typeof(long));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            var priceperQtyParameter = priceperQty.HasValue ?
                new ObjectParameter("PriceperQty", priceperQty) :
                new ObjectParameter("PriceperQty", typeof(decimal));
    
            var orederQtyParameter = orederQty.HasValue ?
                new ObjectParameter("OrederQty", orederQty) :
                new ObjectParameter("OrederQty", typeof(int));
    
            var balanceQtyParameter = balanceQty.HasValue ?
                new ObjectParameter("BalanceQty", balanceQty) :
                new ObjectParameter("BalanceQty", typeof(int));
    
            var receivingQtyParameter = receivingQty.HasValue ?
                new ObjectParameter("ReceivingQty", receivingQty) :
                new ObjectParameter("ReceivingQty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertITReceivingDetails", iTReceivingMasterIDParameter, iTRequestMasterIDParameter, equipmentsubcategoryParameter, equipmentlistParameter, serialNoParameter, priceperQtyParameter, orederQtyParameter, balanceQtyParameter, receivingQtyParameter, totalPriceParameter, commentsParameter, shippingCostParameter, taxParameter, totalCostParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GETMPOValues> GETMPOValues(Nullable<long> machinePartsReceivingMasterID)
        {
            var machinePartsReceivingMasterIDParameter = machinePartsReceivingMasterID.HasValue ?
                new ObjectParameter("MachinePartsReceivingMasterID", machinePartsReceivingMasterID) :
                new ObjectParameter("MachinePartsReceivingMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETMPOValues>("GETMPOValues", machinePartsReceivingMasterIDParameter);
        }
    
        public virtual ObjectResult<SearchMachinePartsReceive> SearchMachinePartsReceive(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMachinePartsReceive>("SearchMachinePartsReceive", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual int SyncMachinePartsReceivingorder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncMachinePartsReceivingorder");
        }
    
        public virtual int SyncITReceivingorder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncITReceivingorder");
        }
    
        public virtual ObjectResult<BindITReceivingsummaryReport> BindITReceivingsummaryReport(string iTNNo, Nullable<long> loggedinby, string filter)
        {
            var iTNNoParameter = iTNNo != null ?
                new ObjectParameter("ITNNo", iTNNo) :
                new ObjectParameter("ITNNo", typeof(string));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindITReceivingsummaryReport>("BindITReceivingsummaryReport", iTNNoParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindMedicalsupplyReceivingDetail> BindMedicalsupplyReceivingDetail(Nullable<long> medicalSuppliesReceivingMasterID, string searchFilters, Nullable<long> loggedinBy)
        {
            var medicalSuppliesReceivingMasterIDParameter = medicalSuppliesReceivingMasterID.HasValue ?
                new ObjectParameter("MedicalSuppliesReceivingMasterID", medicalSuppliesReceivingMasterID) :
                new ObjectParameter("MedicalSuppliesReceivingMasterID", typeof(long));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalsupplyReceivingDetail>("BindMedicalsupplyReceivingDetail", medicalSuppliesReceivingMasterIDParameter, searchFiltersParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchMedicalSuppliesReceiving> SearchMedicalSuppliesReceiving(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMedicalSuppliesReceiving>("SearchMedicalSuppliesReceiving", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual int SyncMedicalSuppliesReceivingOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncMedicalSuppliesReceivingOrder");
        }
    
        public virtual ObjectResult<GetCpoDetails> GetCpoDetails(Nullable<long> capitalReceivingMasterID)
        {
            var capitalReceivingMasterIDParameter = capitalReceivingMasterID.HasValue ?
                new ObjectParameter("CapitalReceivingMasterID", capitalReceivingMasterID) :
                new ObjectParameter("CapitalReceivingMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCpoDetails>("GetCpoDetails", capitalReceivingMasterIDParameter);
        }
    
        public virtual ObjectResult<GetCPROMasterReview> GetCPROMasterReview(Nullable<long> capitalReceivingMasterID)
        {
            var capitalReceivingMasterIDParameter = capitalReceivingMasterID.HasValue ?
                new ObjectParameter("CapitalReceivingMasterID", capitalReceivingMasterID) :
                new ObjectParameter("CapitalReceivingMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCPROMasterReview>("GetCPROMasterReview", capitalReceivingMasterIDParameter);
        }
    
        public virtual ObjectResult<GetServiceReceiveOrder> GetServiceReceiveOrder(Nullable<long> serviceRequestMasterID, Nullable<long> serviceRequestDetailsID, Nullable<long> loggedinBy)
        {
            var serviceRequestMasterIDParameter = serviceRequestMasterID.HasValue ?
                new ObjectParameter("ServiceRequestMasterID", serviceRequestMasterID) :
                new ObjectParameter("ServiceRequestMasterID", typeof(long));
    
            var serviceRequestDetailsIDParameter = serviceRequestDetailsID.HasValue ?
                new ObjectParameter("ServiceRequestDetailsID", serviceRequestDetailsID) :
                new ObjectParameter("ServiceRequestDetailsID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceReceiveOrder>("GetServiceReceiveOrder", serviceRequestMasterIDParameter, serviceRequestDetailsIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<UpdateMSRReceivingMaster> UpdateMSRReceivingMaster(Nullable<long> medicalSuppliesReceivingMasterID, Nullable<long> pRMasterID, string pONo, Nullable<long> medicalSuppliesRequestOrderID, string packingilpNo, Nullable<System.DateTime> packingslipDate, Nullable<System.DateTime> receivedDate, string invoiceNo, string invoiceStatus, Nullable<long> invoicedBy, Nullable<System.DateTime> invoiceDate, string receivingAction, string reason, string otherReason, string finalStatus, Nullable<long> createdBy, string type, Nullable<decimal> shippingCost, Nullable<decimal> tax, Nullable<decimal> totalCost, Nullable<long> loggedinBy, string fILTER)
        {
            var medicalSuppliesReceivingMasterIDParameter = medicalSuppliesReceivingMasterID.HasValue ?
                new ObjectParameter("MedicalSuppliesReceivingMasterID", medicalSuppliesReceivingMasterID) :
                new ObjectParameter("MedicalSuppliesReceivingMasterID", typeof(long));
    
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var medicalSuppliesRequestOrderIDParameter = medicalSuppliesRequestOrderID.HasValue ?
                new ObjectParameter("MedicalSuppliesRequestOrderID", medicalSuppliesRequestOrderID) :
                new ObjectParameter("MedicalSuppliesRequestOrderID", typeof(long));
    
            var packingilpNoParameter = packingilpNo != null ?
                new ObjectParameter("PackingilpNo", packingilpNo) :
                new ObjectParameter("PackingilpNo", typeof(string));
    
            var packingslipDateParameter = packingslipDate.HasValue ?
                new ObjectParameter("PackingslipDate", packingslipDate) :
                new ObjectParameter("PackingslipDate", typeof(System.DateTime));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoicedByParameter = invoicedBy.HasValue ?
                new ObjectParameter("InvoicedBy", invoicedBy) :
                new ObjectParameter("InvoicedBy", typeof(long));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var receivingActionParameter = receivingAction != null ?
                new ObjectParameter("ReceivingAction", receivingAction) :
                new ObjectParameter("ReceivingAction", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var shippingCostParameter = shippingCost.HasValue ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(decimal));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateMSRReceivingMaster>("UpdateMSRReceivingMaster", medicalSuppliesReceivingMasterIDParameter, pRMasterIDParameter, pONoParameter, medicalSuppliesRequestOrderIDParameter, packingilpNoParameter, packingslipDateParameter, receivedDateParameter, invoiceNoParameter, invoiceStatusParameter, invoicedByParameter, invoiceDateParameter, receivingActionParameter, reasonParameter, otherReasonParameter, finalStatusParameter, createdByParameter, typeParameter, shippingCostParameter, taxParameter, totalCostParameter, loggedinByParameter, fILTERParameter);
        }
    
        public virtual int UpdateMSRReceivingDetails(Nullable<long> medicalSuppliesReceivingDetailsID, Nullable<long> medicalSuppliesReceivingMasterID, string finalStatus, string type, Nullable<long> iNSERTRECORDID, Nullable<long> loggedinBy, string fILTER, Nullable<int> balanceQty, Nullable<int> receivedQty, Nullable<decimal> totalPrice, string comments)
        {
            var medicalSuppliesReceivingDetailsIDParameter = medicalSuppliesReceivingDetailsID.HasValue ?
                new ObjectParameter("MedicalSuppliesReceivingDetailsID", medicalSuppliesReceivingDetailsID) :
                new ObjectParameter("MedicalSuppliesReceivingDetailsID", typeof(long));
    
            var medicalSuppliesReceivingMasterIDParameter = medicalSuppliesReceivingMasterID.HasValue ?
                new ObjectParameter("MedicalSuppliesReceivingMasterID", medicalSuppliesReceivingMasterID) :
                new ObjectParameter("MedicalSuppliesReceivingMasterID", typeof(long));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iNSERTRECORDIDParameter = iNSERTRECORDID.HasValue ?
                new ObjectParameter("INSERTRECORDID", iNSERTRECORDID) :
                new ObjectParameter("INSERTRECORDID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var balanceQtyParameter = balanceQty.HasValue ?
                new ObjectParameter("BalanceQty", balanceQty) :
                new ObjectParameter("BalanceQty", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMSRReceivingDetails", medicalSuppliesReceivingDetailsIDParameter, medicalSuppliesReceivingMasterIDParameter, finalStatusParameter, typeParameter, iNSERTRECORDIDParameter, loggedinByParameter, fILTERParameter, balanceQtyParameter, receivedQtyParameter, totalPriceParameter, commentsParameter);
        }
    
        public virtual int UpdateITReceivingDetails(Nullable<long> iTReceivingDetailsID, Nullable<long> iTReceivingMasterID, Nullable<long> iTRequestMasterID, string finalStatus, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER, Nullable<long> iNSERTRECORDID, Nullable<int> balanceQty, Nullable<int> receivedQty, Nullable<decimal> totalPrice, string comments, string user)
        {
            var iTReceivingDetailsIDParameter = iTReceivingDetailsID.HasValue ?
                new ObjectParameter("ITReceivingDetailsID", iTReceivingDetailsID) :
                new ObjectParameter("ITReceivingDetailsID", typeof(long));
    
            var iTReceivingMasterIDParameter = iTReceivingMasterID.HasValue ?
                new ObjectParameter("ITReceivingMasterID", iTReceivingMasterID) :
                new ObjectParameter("ITReceivingMasterID", typeof(long));
    
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var iNSERTRECORDIDParameter = iNSERTRECORDID.HasValue ?
                new ObjectParameter("INSERTRECORDID", iNSERTRECORDID) :
                new ObjectParameter("INSERTRECORDID", typeof(long));
    
            var balanceQtyParameter = balanceQty.HasValue ?
                new ObjectParameter("BalanceQty", balanceQty) :
                new ObjectParameter("BalanceQty", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateITReceivingDetails", iTReceivingDetailsIDParameter, iTReceivingMasterIDParameter, iTRequestMasterIDParameter, finalStatusParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter, iNSERTRECORDIDParameter, balanceQtyParameter, receivedQtyParameter, totalPriceParameter, commentsParameter, userParameter);
        }
    
        public virtual ObjectResult<UpdateITRecevingMaster> UpdateITRecevingMaster(Nullable<long> iTReceivingMasterID, Nullable<long> iTRequestMasterID, Nullable<long> iTRequestOrderID, string iTNNO, string packingilpNo, Nullable<System.DateTime> packingslipDate, Nullable<System.DateTime> receivedDate, string invoiceNo, string invoiceStatus, Nullable<long> invoicedBy, Nullable<System.DateTime> invoiceDate, string receivingAction, string reason, string otherReason, string finalStatus, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER, string shippingCost, string tax, Nullable<decimal> totalCost)
        {
            var iTReceivingMasterIDParameter = iTReceivingMasterID.HasValue ?
                new ObjectParameter("ITReceivingMasterID", iTReceivingMasterID) :
                new ObjectParameter("ITReceivingMasterID", typeof(long));
    
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var iTRequestOrderIDParameter = iTRequestOrderID.HasValue ?
                new ObjectParameter("ITRequestOrderID", iTRequestOrderID) :
                new ObjectParameter("ITRequestOrderID", typeof(long));
    
            var iTNNOParameter = iTNNO != null ?
                new ObjectParameter("ITNNO", iTNNO) :
                new ObjectParameter("ITNNO", typeof(string));
    
            var packingilpNoParameter = packingilpNo != null ?
                new ObjectParameter("PackingilpNo", packingilpNo) :
                new ObjectParameter("PackingilpNo", typeof(string));
    
            var packingslipDateParameter = packingslipDate.HasValue ?
                new ObjectParameter("PackingslipDate", packingslipDate) :
                new ObjectParameter("PackingslipDate", typeof(System.DateTime));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoicedByParameter = invoicedBy.HasValue ?
                new ObjectParameter("InvoicedBy", invoicedBy) :
                new ObjectParameter("InvoicedBy", typeof(long));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var receivingActionParameter = receivingAction != null ?
                new ObjectParameter("ReceivingAction", receivingAction) :
                new ObjectParameter("ReceivingAction", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var shippingCostParameter = shippingCost != null ?
                new ObjectParameter("ShippingCost", shippingCost) :
                new ObjectParameter("ShippingCost", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateITRecevingMaster>("UpdateITRecevingMaster", iTReceivingMasterIDParameter, iTRequestMasterIDParameter, iTRequestOrderIDParameter, iTNNOParameter, packingilpNoParameter, packingslipDateParameter, receivedDateParameter, invoiceNoParameter, invoiceStatusParameter, invoicedByParameter, invoiceDateParameter, receivingActionParameter, reasonParameter, otherReasonParameter, finalStatusParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter, shippingCostParameter, taxParameter, totalCostParameter);
        }
    
        public virtual ObjectResult<UpdateMachinePartsReceivingMaster> UpdateMachinePartsReceivingMaster(Nullable<long> machinePartsReceivingMasterID, Nullable<long> mPRMasterID, Nullable<long> machinePartsRequestOrderID, string mPONo, string packingSlipNo, Nullable<System.DateTime> packingslipDate, Nullable<System.DateTime> receivedDate, string invoiceNo, string invoiceStatus, Nullable<long> invoicedBy, Nullable<System.DateTime> invoiceDate, string receivingAction, string reason, string others, string finalStatus, string shipping, string tax, Nullable<decimal> totalCost, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER)
        {
            var machinePartsReceivingMasterIDParameter = machinePartsReceivingMasterID.HasValue ?
                new ObjectParameter("MachinePartsReceivingMasterID", machinePartsReceivingMasterID) :
                new ObjectParameter("MachinePartsReceivingMasterID", typeof(long));
    
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var machinePartsRequestOrderIDParameter = machinePartsRequestOrderID.HasValue ?
                new ObjectParameter("MachinePartsRequestOrderID", machinePartsRequestOrderID) :
                new ObjectParameter("MachinePartsRequestOrderID", typeof(long));
    
            var mPONoParameter = mPONo != null ?
                new ObjectParameter("MPONo", mPONo) :
                new ObjectParameter("MPONo", typeof(string));
    
            var packingSlipNoParameter = packingSlipNo != null ?
                new ObjectParameter("PackingSlipNo", packingSlipNo) :
                new ObjectParameter("PackingSlipNo", typeof(string));
    
            var packingslipDateParameter = packingslipDate.HasValue ?
                new ObjectParameter("PackingslipDate", packingslipDate) :
                new ObjectParameter("PackingslipDate", typeof(System.DateTime));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var invoiceStatusParameter = invoiceStatus != null ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(string));
    
            var invoicedByParameter = invoicedBy.HasValue ?
                new ObjectParameter("InvoicedBy", invoicedBy) :
                new ObjectParameter("InvoicedBy", typeof(long));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var receivingActionParameter = receivingAction != null ?
                new ObjectParameter("ReceivingAction", receivingAction) :
                new ObjectParameter("ReceivingAction", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("Others", others) :
                new ObjectParameter("Others", typeof(string));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var shippingParameter = shipping != null ?
                new ObjectParameter("Shipping", shipping) :
                new ObjectParameter("Shipping", typeof(string));
    
            var taxParameter = tax != null ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(string));
    
            var totalCostParameter = totalCost.HasValue ?
                new ObjectParameter("TotalCost", totalCost) :
                new ObjectParameter("TotalCost", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateMachinePartsReceivingMaster>("UpdateMachinePartsReceivingMaster", machinePartsReceivingMasterIDParameter, mPRMasterIDParameter, machinePartsRequestOrderIDParameter, mPONoParameter, packingSlipNoParameter, packingslipDateParameter, receivedDateParameter, invoiceNoParameter, invoiceStatusParameter, invoicedByParameter, invoiceDateParameter, receivingActionParameter, reasonParameter, othersParameter, finalStatusParameter, shippingParameter, taxParameter, totalCostParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter);
        }
    
        public virtual int UpdateMachinePartsReceivingDetails(Nullable<long> machinePartsReceivingDetailsID, Nullable<long> machinePartsReceivingMasterID, Nullable<long> mPRMasterID, Nullable<long> machinePartsRequestOrderID, string finalStatus, Nullable<long> createdBy, string type, Nullable<long> loggedinBy, string fILTER, Nullable<long> iNSERTRECORDID, Nullable<int> balanceQty, Nullable<int> receivedQty, Nullable<decimal> totalPrice, string comments)
        {
            var machinePartsReceivingDetailsIDParameter = machinePartsReceivingDetailsID.HasValue ?
                new ObjectParameter("MachinePartsReceivingDetailsID", machinePartsReceivingDetailsID) :
                new ObjectParameter("MachinePartsReceivingDetailsID", typeof(long));
    
            var machinePartsReceivingMasterIDParameter = machinePartsReceivingMasterID.HasValue ?
                new ObjectParameter("MachinePartsReceivingMasterID", machinePartsReceivingMasterID) :
                new ObjectParameter("MachinePartsReceivingMasterID", typeof(long));
    
            var mPRMasterIDParameter = mPRMasterID.HasValue ?
                new ObjectParameter("MPRMasterID", mPRMasterID) :
                new ObjectParameter("MPRMasterID", typeof(long));
    
            var machinePartsRequestOrderIDParameter = machinePartsRequestOrderID.HasValue ?
                new ObjectParameter("MachinePartsRequestOrderID", machinePartsRequestOrderID) :
                new ObjectParameter("MachinePartsRequestOrderID", typeof(long));
    
            var finalStatusParameter = finalStatus != null ?
                new ObjectParameter("FinalStatus", finalStatus) :
                new ObjectParameter("FinalStatus", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var fILTERParameter = fILTER != null ?
                new ObjectParameter("FILTER", fILTER) :
                new ObjectParameter("FILTER", typeof(string));
    
            var iNSERTRECORDIDParameter = iNSERTRECORDID.HasValue ?
                new ObjectParameter("INSERTRECORDID", iNSERTRECORDID) :
                new ObjectParameter("INSERTRECORDID", typeof(long));
    
            var balanceQtyParameter = balanceQty.HasValue ?
                new ObjectParameter("BalanceQty", balanceQty) :
                new ObjectParameter("BalanceQty", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMachinePartsReceivingDetails", machinePartsReceivingDetailsIDParameter, machinePartsReceivingMasterIDParameter, mPRMasterIDParameter, machinePartsRequestOrderIDParameter, finalStatusParameter, createdByParameter, typeParameter, loggedinByParameter, fILTERParameter, iNSERTRECORDIDParameter, balanceQtyParameter, receivedQtyParameter, totalPriceParameter, commentsParameter);
        }
    
        public virtual ObjectResult<Getitronovalue> Getitronovalue(Nullable<long> iTRequestMasterID)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Getitronovalue>("Getitronovalue", iTRequestMasterIDParameter);
        }
    
        public virtual ObjectResult<GETMPROValues> GETMPROValues(Nullable<long> machinePartsReceivingMasterID)
        {
            var machinePartsReceivingMasterIDParameter = machinePartsReceivingMasterID.HasValue ?
                new ObjectParameter("MachinePartsReceivingMasterID", machinePartsReceivingMasterID) :
                new ObjectParameter("MachinePartsReceivingMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETMPROValues>("GETMPROValues", machinePartsReceivingMasterIDParameter);
        }
    
        public virtual ObjectResult<BindITReceivingDetailsReport> BindITReceivingDetailsReport(Nullable<long> iTRequestMasterID, Nullable<long> iTReceivingMasterID, Nullable<long> loggedinby, string filter)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var iTReceivingMasterIDParameter = iTReceivingMasterID.HasValue ?
                new ObjectParameter("ITReceivingMasterID", iTReceivingMasterID) :
                new ObjectParameter("ITReceivingMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindITReceivingDetailsReport>("BindITReceivingDetailsReport", iTRequestMasterIDParameter, iTReceivingMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindMachineReceiveSummaryReport> BindMachineReceiveSummaryReport(Nullable<long> machinePartsRequestOrderID, Nullable<long> loggedinBy, string filter)
        {
            var machinePartsRequestOrderIDParameter = machinePartsRequestOrderID.HasValue ?
                new ObjectParameter("MachinePartsRequestOrderID", machinePartsRequestOrderID) :
                new ObjectParameter("MachinePartsRequestOrderID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMachineReceiveSummaryReport>("BindMachineReceiveSummaryReport", machinePartsRequestOrderIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetFacilityByListCorporateID> GetFacilityByListCorporateID(string listCorporateID, Nullable<long> userID, Nullable<long> roleID)
        {
            var listCorporateIDParameter = listCorporateID != null ?
                new ObjectParameter("ListCorporateID", listCorporateID) :
                new ObjectParameter("ListCorporateID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilityByListCorporateID>("GetFacilityByListCorporateID", listCorporateIDParameter, userIDParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<GetVendorByFacilityID> GetVendorByFacilityID(string listFacilityID, Nullable<long> loggedIN)
        {
            var listFacilityIDParameter = listFacilityID != null ?
                new ObjectParameter("ListFacilityID", listFacilityID) :
                new ObjectParameter("ListFacilityID", typeof(string));
    
            var loggedINParameter = loggedIN.HasValue ?
                new ObjectParameter("LoggedIN", loggedIN) :
                new ObjectParameter("LoggedIN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorByFacilityID>("GetVendorByFacilityID", listFacilityIDParameter, loggedINParameter);
        }
    
        public virtual ObjectResult<SearchEndingInventory> SearchEndingInventory(string corporateID, string facilityID, string vendorID, string itemCategoryID, Nullable<System.DateTime> monthYear, Nullable<bool> newFacility, Nullable<long> loggedinBy, string filter, string itemType)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID != null ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(string));
    
            var monthYearParameter = monthYear.HasValue ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(System.DateTime));
    
            var newFacilityParameter = newFacility.HasValue ?
                new ObjectParameter("NewFacility", newFacility) :
                new ObjectParameter("NewFacility", typeof(bool));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchEndingInventory>("SearchEndingInventory", corporateIDParameter, facilityIDParameter, vendorIDParameter, itemCategoryIDParameter, monthYearParameter, newFacilityParameter, loggedinByParameter, filterParameter, itemTypeParameter);
        }
    
        public virtual int SyncEndingInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncEndingInventory");
        }
    
        public virtual ObjectResult<BindMedicalSupplyDetailsReport> BindMedicalSupplyDetailsReport(Nullable<long> mSRequestMasterID, Nullable<long> mSReceiveMasterID, Nullable<long> loggedinby, string filter)
        {
            var mSRequestMasterIDParameter = mSRequestMasterID.HasValue ?
                new ObjectParameter("MSRequestMasterID", mSRequestMasterID) :
                new ObjectParameter("MSRequestMasterID", typeof(long));
    
            var mSReceiveMasterIDParameter = mSReceiveMasterID.HasValue ?
                new ObjectParameter("MSReceiveMasterID", mSReceiveMasterID) :
                new ObjectParameter("MSReceiveMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalSupplyDetailsReport>("BindMedicalSupplyDetailsReport", mSRequestMasterIDParameter, mSReceiveMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindMedicalSupplyDetailsSubReport> BindMedicalSupplyDetailsSubReport(Nullable<long> mSRequestMasterID, Nullable<long> loggedinby, string filter)
        {
            var mSRequestMasterIDParameter = mSRequestMasterID.HasValue ?
                new ObjectParameter("MSRequestMasterID", mSRequestMasterID) :
                new ObjectParameter("MSRequestMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMedicalSupplyDetailsSubReport>("BindMedicalSupplyDetailsSubReport", mSRequestMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetMSRReceivingsummaryReport> GetMSRReceivingsummaryReport(Nullable<long> pRMasterID, Nullable<long> loggedinby, string filter)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMSRReceivingsummaryReport>("GetMSRReceivingsummaryReport", pRMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindITReceivingDetailsSubReport> BindITReceivingDetailsSubReport(Nullable<long> iTRequestMasterID, Nullable<long> loggedinby, string filter)
        {
            var iTRequestMasterIDParameter = iTRequestMasterID.HasValue ?
                new ObjectParameter("ITRequestMasterID", iTRequestMasterID) :
                new ObjectParameter("ITRequestMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindITReceivingDetailsSubReport>("BindITReceivingDetailsSubReport", iTRequestMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindCapitalDetailsReport> BindCapitalDetailsReport(Nullable<long> rCapitalRequestMasterID, Nullable<long> rCapitalReceivingMasterID, Nullable<long> loggedinby, string filter)
        {
            var rCapitalRequestMasterIDParameter = rCapitalRequestMasterID.HasValue ?
                new ObjectParameter("RCapitalRequestMasterID", rCapitalRequestMasterID) :
                new ObjectParameter("RCapitalRequestMasterID", typeof(long));
    
            var rCapitalReceivingMasterIDParameter = rCapitalReceivingMasterID.HasValue ?
                new ObjectParameter("RCapitalReceivingMasterID", rCapitalReceivingMasterID) :
                new ObjectParameter("RCapitalReceivingMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCapitalDetailsReport>("BindCapitalDetailsReport", rCapitalRequestMasterIDParameter, rCapitalReceivingMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindCapitalReceivingDetailsSubReport> BindCapitalReceivingDetailsSubReport(Nullable<long> capitalItemMasterID, Nullable<long> loggedinby, string filter)
        {
            var capitalItemMasterIDParameter = capitalItemMasterID.HasValue ?
                new ObjectParameter("CapitalItemMasterID", capitalItemMasterID) :
                new ObjectParameter("CapitalItemMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCapitalReceivingDetailsSubReport>("BindCapitalReceivingDetailsSubReport", capitalItemMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindCapitalReceivingsummaryReport> BindCapitalReceivingsummaryReport(Nullable<long> capitalOrderID, Nullable<long> loggedinby, string filter)
        {
            var capitalOrderIDParameter = capitalOrderID.HasValue ?
                new ObjectParameter("CapitalOrderID", capitalOrderID) :
                new ObjectParameter("CapitalOrderID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCapitalReceivingsummaryReport>("BindCapitalReceivingsummaryReport", capitalOrderIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindMachinePartReceivingDetailsSubReport> BindMachinePartReceivingDetailsSubReport(Nullable<long> mPRequestMasterID, Nullable<long> loggedinby, string filter)
        {
            var mPRequestMasterIDParameter = mPRequestMasterID.HasValue ?
                new ObjectParameter("MPRequestMasterID", mPRequestMasterID) :
                new ObjectParameter("MPRequestMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMachinePartReceivingDetailsSubReport>("BindMachinePartReceivingDetailsSubReport", mPRequestMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindMachineReceivingDetailsReport> BindMachineReceivingDetailsReport(Nullable<long> machinePartsRequestMasterID, Nullable<long> machinePartsReceivingMasterID, Nullable<long> loggedinby, string filter)
        {
            var machinePartsRequestMasterIDParameter = machinePartsRequestMasterID.HasValue ?
                new ObjectParameter("MachinePartsRequestMasterID", machinePartsRequestMasterID) :
                new ObjectParameter("MachinePartsRequestMasterID", typeof(long));
    
            var machinePartsReceivingMasterIDParameter = machinePartsReceivingMasterID.HasValue ?
                new ObjectParameter("MachinePartsReceivingMasterID", machinePartsReceivingMasterID) :
                new ObjectParameter("MachinePartsReceivingMasterID", typeof(long));
    
            var loggedinbyParameter = loggedinby.HasValue ?
                new ObjectParameter("loggedinby", loggedinby) :
                new ObjectParameter("loggedinby", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindMachineReceivingDetailsReport>("BindMachineReceivingDetailsReport", machinePartsRequestMasterIDParameter, machinePartsReceivingMasterIDParameter, loggedinbyParameter, filterParameter);
        }
    
        public virtual int InsertEndingInventory(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> categoryID, Nullable<System.DateTime> monthYear, Nullable<long> itemID, string itemDescription, Nullable<long> qtyPack, Nullable<long> uOM, Nullable<long> beggingInven, Nullable<long> receiveingInven, Nullable<long> transferIn, Nullable<long> transferOut, Nullable<long> expiredMeds, Nullable<long> endingInven, Nullable<long> monthlyUsage, Nullable<bool> isNewRecord, Nullable<bool> isNewFacility, Nullable<long> noofvisit, Nullable<long> createdBy)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var monthYearParameter = monthYear.HasValue ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(System.DateTime));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(long));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var beggingInvenParameter = beggingInven.HasValue ?
                new ObjectParameter("BeggingInven", beggingInven) :
                new ObjectParameter("BeggingInven", typeof(long));
    
            var receiveingInvenParameter = receiveingInven.HasValue ?
                new ObjectParameter("ReceiveingInven", receiveingInven) :
                new ObjectParameter("ReceiveingInven", typeof(long));
    
            var transferInParameter = transferIn.HasValue ?
                new ObjectParameter("TransferIn", transferIn) :
                new ObjectParameter("TransferIn", typeof(long));
    
            var transferOutParameter = transferOut.HasValue ?
                new ObjectParameter("TransferOut", transferOut) :
                new ObjectParameter("TransferOut", typeof(long));
    
            var expiredMedsParameter = expiredMeds.HasValue ?
                new ObjectParameter("ExpiredMeds", expiredMeds) :
                new ObjectParameter("ExpiredMeds", typeof(long));
    
            var endingInvenParameter = endingInven.HasValue ?
                new ObjectParameter("EndingInven", endingInven) :
                new ObjectParameter("EndingInven", typeof(long));
    
            var monthlyUsageParameter = monthlyUsage.HasValue ?
                new ObjectParameter("MonthlyUsage", monthlyUsage) :
                new ObjectParameter("MonthlyUsage", typeof(long));
    
            var isNewRecordParameter = isNewRecord.HasValue ?
                new ObjectParameter("IsNewRecord", isNewRecord) :
                new ObjectParameter("IsNewRecord", typeof(bool));
    
            var isNewFacilityParameter = isNewFacility.HasValue ?
                new ObjectParameter("IsNewFacility", isNewFacility) :
                new ObjectParameter("IsNewFacility", typeof(bool));
    
            var noofvisitParameter = noofvisit.HasValue ?
                new ObjectParameter("Noofvisit", noofvisit) :
                new ObjectParameter("Noofvisit", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEndingInventory", corporateIDParameter, facilityIDParameter, categoryIDParameter, monthYearParameter, itemIDParameter, itemDescriptionParameter, qtyPackParameter, uOMParameter, beggingInvenParameter, receiveingInvenParameter, transferInParameter, transferOutParameter, expiredMedsParameter, endingInvenParameter, monthlyUsageParameter, isNewRecordParameter, isNewFacilityParameter, noofvisitParameter, createdByParameter);
        }
    
        public virtual int UpdateEndingInventory(Nullable<long> endingInvenID, Nullable<long> beggingInven, Nullable<long> receiveingInven, Nullable<long> transferIn, Nullable<long> transferOut, Nullable<long> expiredMeds, Nullable<long> endingInven, Nullable<long> monthlyUsage, Nullable<long> noofvisit, Nullable<long> lastModifiedBy)
        {
            var endingInvenIDParameter = endingInvenID.HasValue ?
                new ObjectParameter("EndingInvenID", endingInvenID) :
                new ObjectParameter("EndingInvenID", typeof(long));
    
            var beggingInvenParameter = beggingInven.HasValue ?
                new ObjectParameter("BeggingInven", beggingInven) :
                new ObjectParameter("BeggingInven", typeof(long));
    
            var receiveingInvenParameter = receiveingInven.HasValue ?
                new ObjectParameter("ReceiveingInven", receiveingInven) :
                new ObjectParameter("ReceiveingInven", typeof(long));
    
            var transferInParameter = transferIn.HasValue ?
                new ObjectParameter("TransferIn", transferIn) :
                new ObjectParameter("TransferIn", typeof(long));
    
            var transferOutParameter = transferOut.HasValue ?
                new ObjectParameter("TransferOut", transferOut) :
                new ObjectParameter("TransferOut", typeof(long));
    
            var expiredMedsParameter = expiredMeds.HasValue ?
                new ObjectParameter("ExpiredMeds", expiredMeds) :
                new ObjectParameter("ExpiredMeds", typeof(long));
    
            var endingInvenParameter = endingInven.HasValue ?
                new ObjectParameter("EndingInven", endingInven) :
                new ObjectParameter("EndingInven", typeof(long));
    
            var monthlyUsageParameter = monthlyUsage.HasValue ?
                new ObjectParameter("MonthlyUsage", monthlyUsage) :
                new ObjectParameter("MonthlyUsage", typeof(long));
    
            var noofvisitParameter = noofvisit.HasValue ?
                new ObjectParameter("Noofvisit", noofvisit) :
                new ObjectParameter("Noofvisit", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEndingInventory", endingInvenIDParameter, beggingInvenParameter, receiveingInvenParameter, transferInParameter, transferOutParameter, expiredMedsParameter, endingInvenParameter, monthlyUsageParameter, noofvisitParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<SearchTransferOut> SearchTransferOut(Nullable<System.DateTime> transferDate, Nullable<long> corporateID, Nullable<long> transferFrom, Nullable<long> itemCategory, Nullable<long> loggedinBy, string filter)
        {
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var transferFromParameter = transferFrom.HasValue ?
                new ObjectParameter("TransferFrom", transferFrom) :
                new ObjectParameter("TransferFrom", typeof(long));
    
            var itemCategoryParameter = itemCategory.HasValue ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTransferOut>("SearchTransferOut", transferDateParameter, corporateIDParameter, transferFromParameter, itemCategoryParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int InsertTransferOut(string transferNo, Nullable<System.DateTime> transferDate, Nullable<long> corporateIDFrom, Nullable<long> corporateIDTo, Nullable<long> transferredFromFacility, Nullable<long> transferredToFacility, Nullable<long> categoryID, Nullable<long> itemID, string itemDescription, Nullable<long> uOM, Nullable<long> qtyPack, Nullable<decimal> price, Nullable<long> transferQuantity, Nullable<decimal> totalPrice, string status, Nullable<long> createdBy)
        {
            var transferNoParameter = transferNo != null ?
                new ObjectParameter("TransferNo", transferNo) :
                new ObjectParameter("TransferNo", typeof(string));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var corporateIDFromParameter = corporateIDFrom.HasValue ?
                new ObjectParameter("CorporateIDFrom", corporateIDFrom) :
                new ObjectParameter("CorporateIDFrom", typeof(long));
    
            var corporateIDToParameter = corporateIDTo.HasValue ?
                new ObjectParameter("CorporateIDTo", corporateIDTo) :
                new ObjectParameter("CorporateIDTo", typeof(long));
    
            var transferredFromFacilityParameter = transferredFromFacility.HasValue ?
                new ObjectParameter("TransferredFromFacility", transferredFromFacility) :
                new ObjectParameter("TransferredFromFacility", typeof(long));
    
            var transferredToFacilityParameter = transferredToFacility.HasValue ?
                new ObjectParameter("TransferredToFacility", transferredToFacility) :
                new ObjectParameter("TransferredToFacility", typeof(long));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var transferQuantityParameter = transferQuantity.HasValue ?
                new ObjectParameter("TransferQuantity", transferQuantity) :
                new ObjectParameter("TransferQuantity", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransferOut", transferNoParameter, transferDateParameter, corporateIDFromParameter, corporateIDToParameter, transferredFromFacilityParameter, transferredToFacilityParameter, categoryIDParameter, itemIDParameter, itemDescriptionParameter, uOMParameter, qtyPackParameter, priceParameter, transferQuantityParameter, totalPriceParameter, statusParameter, createdByParameter);
        }
    
        public virtual ObjectResult<GetReceivedQtyInfo> GetReceivedQtyInfo(Nullable<long> itemID, Nullable<long> facilityID, Nullable<System.DateTime> receivedDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReceivedQtyInfo>("GetReceivedQtyInfo", itemIDParameter, facilityIDParameter, receivedDateParameter);
        }
    
        public virtual ObjectResult<GetTransferNo> GetTransferNo(Nullable<long> transferFrom, Nullable<long> transferTo)
        {
            var transferFromParameter = transferFrom.HasValue ?
                new ObjectParameter("TransferFrom", transferFrom) :
                new ObjectParameter("TransferFrom", typeof(long));
    
            var transferToParameter = transferTo.HasValue ?
                new ObjectParameter("TransferTo", transferTo) :
                new ObjectParameter("TransferTo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferNo>("GetTransferNo", transferFromParameter, transferToParameter);
        }
    
        public virtual ObjectResult<SearchTransferIn> SearchTransferIn(string corporateID, string facilityID, string categoryID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTransferIn>("SearchTransferIn", corporateIDParameter, facilityIDParameter, categoryIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual int InsertTransferIn(Nullable<long> transferOutID, string transferNo, Nullable<System.DateTime> transferOutDate, Nullable<long> corporateIDfrom, Nullable<long> corporateIDTo, Nullable<long> facilityIDFrom, Nullable<long> facilityIDTo, Nullable<long> categoryID, Nullable<long> itemID, string itemDescription, Nullable<long> qtyPack, Nullable<long> uOM, Nullable<long> transferqty, Nullable<decimal> price, Nullable<decimal> totalPrice, string status, Nullable<long> loggedinBy)
        {
            var transferOutIDParameter = transferOutID.HasValue ?
                new ObjectParameter("TransferOutID", transferOutID) :
                new ObjectParameter("TransferOutID", typeof(long));
    
            var transferNoParameter = transferNo != null ?
                new ObjectParameter("TransferNo", transferNo) :
                new ObjectParameter("TransferNo", typeof(string));
    
            var transferOutDateParameter = transferOutDate.HasValue ?
                new ObjectParameter("TransferOutDate", transferOutDate) :
                new ObjectParameter("TransferOutDate", typeof(System.DateTime));
    
            var corporateIDfromParameter = corporateIDfrom.HasValue ?
                new ObjectParameter("CorporateIDfrom", corporateIDfrom) :
                new ObjectParameter("CorporateIDfrom", typeof(long));
    
            var corporateIDToParameter = corporateIDTo.HasValue ?
                new ObjectParameter("CorporateIDTo", corporateIDTo) :
                new ObjectParameter("CorporateIDTo", typeof(long));
    
            var facilityIDFromParameter = facilityIDFrom.HasValue ?
                new ObjectParameter("FacilityIDFrom", facilityIDFrom) :
                new ObjectParameter("FacilityIDFrom", typeof(long));
    
            var facilityIDToParameter = facilityIDTo.HasValue ?
                new ObjectParameter("FacilityIDTo", facilityIDTo) :
                new ObjectParameter("FacilityIDTo", typeof(long));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var qtyPackParameter = qtyPack.HasValue ?
                new ObjectParameter("QtyPack", qtyPack) :
                new ObjectParameter("QtyPack", typeof(long));
    
            var uOMParameter = uOM.HasValue ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(long));
    
            var transferqtyParameter = transferqty.HasValue ?
                new ObjectParameter("Transferqty", transferqty) :
                new ObjectParameter("Transferqty", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransferIn", transferOutIDParameter, transferNoParameter, transferOutDateParameter, corporateIDfromParameter, corporateIDToParameter, facilityIDFromParameter, facilityIDToParameter, categoryIDParameter, itemIDParameter, itemDescriptionParameter, qtyPackParameter, uOMParameter, transferqtyParameter, priceParameter, totalPriceParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchTransferInHistory> SearchTransferInHistory(string corporateID, string facilityID, string categoryID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTransferInHistory>("SearchTransferInHistory", corporateIDParameter, facilityIDParameter, categoryIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchTransferOutHistory> SearchTransferOutHistory(string corporateID, string facilityID, string categoryID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTransferOutHistory>("SearchTransferOutHistory", corporateIDParameter, facilityIDParameter, categoryIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetTransferINQtyInfo> GetTransferINQtyInfo(Nullable<long> itemID, Nullable<long> facilityID, Nullable<System.DateTime> transferDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferINQtyInfo>("GetTransferINQtyInfo", itemIDParameter, facilityIDParameter, transferDateParameter);
        }
    
        public virtual ObjectResult<GetTransferOutQtyInfo> GetTransferOutQtyInfo(Nullable<long> itemID, Nullable<long> facilityID, Nullable<System.DateTime> transferDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferOutQtyInfo>("GetTransferOutQtyInfo", itemIDParameter, facilityIDParameter, transferDateParameter);
        }
    
        public virtual ObjectResult<ValidateMedicalSuppliesItem> ValidateMedicalSuppliesItem(Nullable<long> facilityID, Nullable<long> vendorID, Nullable<long> itemID, Nullable<long> loggedinBy)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateMedicalSuppliesItem>("ValidateMedicalSuppliesItem", facilityIDParameter, vendorIDParameter, itemIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<ValidCapitalEquipment> ValidCapitalEquipment(Nullable<long> equipmentSubCategoryID, Nullable<long> equipmentList, Nullable<long> facilityID)
        {
            var equipmentSubCategoryIDParameter = equipmentSubCategoryID.HasValue ?
                new ObjectParameter("EquipmentSubCategoryID", equipmentSubCategoryID) :
                new ObjectParameter("EquipmentSubCategoryID", typeof(long));
    
            var equipmentListParameter = equipmentList.HasValue ?
                new ObjectParameter("EquipmentList", equipmentList) :
                new ObjectParameter("EquipmentList", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidCapitalEquipment>("ValidCapitalEquipment", equipmentSubCategoryIDParameter, equipmentListParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<ValidMachineEquipment> ValidMachineEquipment(Nullable<long> equipmentCategory, Nullable<long> equipementSubcategory, Nullable<long> equipmentList, Nullable<long> facilityID)
        {
            var equipmentCategoryParameter = equipmentCategory.HasValue ?
                new ObjectParameter("EquipmentCategory", equipmentCategory) :
                new ObjectParameter("EquipmentCategory", typeof(long));
    
            var equipementSubcategoryParameter = equipementSubcategory.HasValue ?
                new ObjectParameter("EquipementSubcategory", equipementSubcategory) :
                new ObjectParameter("EquipementSubcategory", typeof(long));
    
            var equipmentListParameter = equipmentList.HasValue ?
                new ObjectParameter("EquipmentList", equipmentList) :
                new ObjectParameter("EquipmentList", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidMachineEquipment>("ValidMachineEquipment", equipmentCategoryParameter, equipementSubcategoryParameter, equipmentListParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<ValidITEquipment> ValidITEquipment(Nullable<long> equimentSubCategory, Nullable<long> equipmentList, Nullable<long> facilityID)
        {
            var equimentSubCategoryParameter = equimentSubCategory.HasValue ?
                new ObjectParameter("EquimentSubCategory", equimentSubCategory) :
                new ObjectParameter("EquimentSubCategory", typeof(long));
    
            var equipmentListParameter = equipmentList.HasValue ?
                new ObjectParameter("EquipmentList", equipmentList) :
                new ObjectParameter("EquipmentList", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidITEquipment>("ValidITEquipment", equimentSubCategoryParameter, equipmentListParameter, facilityIDParameter);
        }
    
        public virtual ObjectResult<GetTransferInHistoryReport> GetTransferInHistoryReport(string transferOutID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var transferOutIDParameter = transferOutID != null ?
                new ObjectParameter("TransferOutID", transferOutID) :
                new ObjectParameter("TransferOutID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferInHistoryReport>("GetTransferInHistoryReport", transferOutIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<EndingInventoryReport> EndingInventoryReport(string corporateID, string facilityID, string itemCategoryID, Nullable<System.DateTime> monthYear, Nullable<bool> newFacility, Nullable<long> loggedinBy, string filter)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID != null ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(string));
    
            var monthYearParameter = monthYear.HasValue ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(System.DateTime));
    
            var newFacilityParameter = newFacility.HasValue ?
                new ObjectParameter("NewFacility", newFacility) :
                new ObjectParameter("NewFacility", typeof(bool));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EndingInventoryReport>("EndingInventoryReport", corporateIDParameter, facilityIDParameter, itemCategoryIDParameter, monthYearParameter, newFacilityParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindTransferOutHistoryReport> BindTransferOutHistoryReport(string transferOutID, string searchFilters, Nullable<long> lockedBy, Nullable<long> loggedinBy)
        {
            var transferOutIDParameter = transferOutID != null ?
                new ObjectParameter("TransferOutID", transferOutID) :
                new ObjectParameter("TransferOutID", typeof(string));
    
            var searchFiltersParameter = searchFilters != null ?
                new ObjectParameter("SearchFilters", searchFilters) :
                new ObjectParameter("SearchFilters", typeof(string));
    
            var lockedByParameter = lockedBy.HasValue ?
                new ObjectParameter("LockedBy", lockedBy) :
                new ObjectParameter("LockedBy", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindTransferOutHistoryReport>("BindTransferOutHistoryReport", transferOutIDParameter, searchFiltersParameter, lockedByParameter, loggedinByParameter);
        }
    
        public virtual int UpdateTransferDetails(Nullable<long> transferOutID, Nullable<long> transferQty, Nullable<decimal> totalPrice, string status, string remarks, Nullable<long> lastModifiedBy)
        {
            var transferOutIDParameter = transferOutID.HasValue ?
                new ObjectParameter("TransferOutID", transferOutID) :
                new ObjectParameter("TransferOutID", typeof(long));
    
            var transferQtyParameter = transferQty.HasValue ?
                new ObjectParameter("TransferQty", transferQty) :
                new ObjectParameter("TransferQty", typeof(long));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransferDetails", transferOutIDParameter, transferQtyParameter, totalPriceParameter, statusParameter, remarksParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<GetEmailNotificationforTransfer> GetEmailNotificationforTransfer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmailNotificationforTransfer>("GetEmailNotificationforTransfer");
        }
    
        public virtual ObjectResult<GetFromEmailforTransfer> GetFromEmailforTransfer(string transferNo)
        {
            var transferNoParameter = transferNo != null ?
                new ObjectParameter("TransferNo", transferNo) :
                new ObjectParameter("TransferNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFromEmailforTransfer>("GetFromEmailforTransfer", transferNoParameter);
        }
    
        public virtual ObjectResult<GetCatagoryByFacilityID> GetCatagoryByFacilityID(Nullable<long> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCatagoryByFacilityID>("GetCatagoryByFacilityID", facilityIDParameter);
        }
    
        public virtual ObjectResult<GetCategoryByListFacilityID> GetCategoryByListFacilityID(string listFacilityID)
        {
            var listFacilityIDParameter = listFacilityID != null ?
                new ObjectParameter("ListFacilityID", listFacilityID) :
                new ObjectParameter("ListFacilityID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryByListFacilityID>("GetCategoryByListFacilityID", listFacilityIDParameter);
        }
    
        public virtual int InsertCorporateMaster(string corporateName, string corporateDescription, string pOEmail, Nullable<long> createdBy)
        {
            var corporateNameParameter = corporateName != null ?
                new ObjectParameter("CorporateName", corporateName) :
                new ObjectParameter("CorporateName", typeof(string));
    
            var corporateDescriptionParameter = corporateDescription != null ?
                new ObjectParameter("CorporateDescription", corporateDescription) :
                new ObjectParameter("CorporateDescription", typeof(string));
    
            var pOEmailParameter = pOEmail != null ?
                new ObjectParameter("POEmail", pOEmail) :
                new ObjectParameter("POEmail", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCorporateMaster", corporateNameParameter, corporateDescriptionParameter, pOEmailParameter, createdByParameter);
        }
    
        public virtual int UpdateCorporateMaster(Nullable<long> corporateID, string corporaeName, string corporateDescription, string pOEmail, Nullable<long> lastModifiedBy, Nullable<bool> isActive)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var corporaeNameParameter = corporaeName != null ?
                new ObjectParameter("CorporaeName", corporaeName) :
                new ObjectParameter("CorporaeName", typeof(string));
    
            var corporateDescriptionParameter = corporateDescription != null ?
                new ObjectParameter("CorporateDescription", corporateDescription) :
                new ObjectParameter("CorporateDescription", typeof(string));
    
            var pOEmailParameter = pOEmail != null ?
                new ObjectParameter("POEmail", pOEmail) :
                new ObjectParameter("POEmail", typeof(string));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCorporateMaster", corporateIDParameter, corporaeNameParameter, corporateDescriptionParameter, pOEmailParameter, lastModifiedByParameter, isActiveParameter);
        }
    
        public virtual int DeleteCorporateDetails(Nullable<long> corporateID, Nullable<bool> isActive, Nullable<long> lastModitifiedBy)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModitifiedByParameter = lastModitifiedBy.HasValue ?
                new ObjectParameter("LastModitifiedBy", lastModitifiedBy) :
                new ObjectParameter("LastModitifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCorporateDetails", corporateIDParameter, isActiveParameter, lastModitifiedByParameter);
        }
    
        public virtual ObjectResult<SearchCorporateMaster> SearchCorporateMaster(string corporateCode, string corporateDescription, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var corporateCodeParameter = corporateCode != null ?
                new ObjectParameter("CorporateCode", corporateCode) :
                new ObjectParameter("CorporateCode", typeof(string));
    
            var corporateDescriptionParameter = corporateDescription != null ?
                new ObjectParameter("CorporateDescription", corporateDescription) :
                new ObjectParameter("CorporateDescription", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCorporateMaster>("SearchCorporateMaster", corporateCodeParameter, corporateDescriptionParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindCorporateMaster> BindCorporateMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCorporateMaster>("BindCorporateMaster");
        }
    
        public virtual ObjectResult<BindFacilityReport> BindFacilityReport(string searchItem, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindFacilityReport>("BindFacilityReport", searchItemParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetUserRoleForFacility> GetUserRoleForFacility(Nullable<long> facilityID, string listRoleID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var listRoleIDParameter = listRoleID != null ?
                new ObjectParameter("ListRoleID", listRoleID) :
                new ObjectParameter("ListRoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRoleForFacility>("GetUserRoleForFacility", facilityIDParameter, listRoleIDParameter);
        }
    
        public virtual ObjectResult<BindRolesForFacility> BindRolesForFacility(Nullable<long> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindRolesForFacility>("BindRolesForFacility", facilityIDParameter);
        }
    
        public virtual ObjectResult<BindFacilityDetailsReport> BindFacilityDetailsReport(Nullable<long> facilityID, Nullable<long> loggedinBy)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindFacilityDetailsReport>("BindFacilityDetailsReport", facilityIDParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetVendorReport> GetVendorReport(string vendorCode, string vendorDescription, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var vendorCodeParameter = vendorCode != null ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(string));
    
            var vendorDescriptionParameter = vendorDescription != null ?
                new ObjectParameter("VendorDescription", vendorDescription) :
                new ObjectParameter("VendorDescription", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorReport>("GetVendorReport", vendorCodeParameter, vendorDescriptionParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GETVendorUniqueName> GETVendorUniqueName(string vendorUName)
        {
            var vendorUNameParameter = vendorUName != null ?
                new ObjectParameter("VendorUName", vendorUName) :
                new ObjectParameter("VendorUName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETVendorUniqueName>("GETVendorUniqueName", vendorUNameParameter);
        }
    
        public virtual ObjectResult<GetUOMName> GetUOMName(string uOM)
        {
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUOMName>("GetUOMName", uOMParameter);
        }
    
        public virtual ObjectResult<GetVendorItemMappingPage> GetVendorItemMappingPage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorItemMappingPage>("GetVendorItemMappingPage");
        }
    
        public virtual ObjectResult<Validuseremail> Validuseremail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validuseremail>("Validuseremail", emailParameter);
        }
    
        public virtual ObjectResult<Validgpbillcode> Validgpbillcode(string gpBillingCode)
        {
            var gpBillingCodeParameter = gpBillingCode != null ?
                new ObjectParameter("GpBillingCode", gpBillingCode) :
                new ObjectParameter("GpBillingCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Validgpbillcode>("Validgpbillcode", gpBillingCodeParameter);
        }
    
        public virtual ObjectResult<GetVendorDetailsReport> GetVendorDetailsReport(Nullable<long> vendorID, Nullable<long> loggedinBy, string filter)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorDetailsReport>("GetVendorDetailsReport", vendorIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetUserPermissionReport> GetUserPermissionReport(string mainMenuID, string subMenuID, string searchFilter, Nullable<long> loggedInBy)
        {
            var mainMenuIDParameter = mainMenuID != null ?
                new ObjectParameter("MainMenuID", mainMenuID) :
                new ObjectParameter("MainMenuID", typeof(string));
    
            var subMenuIDParameter = subMenuID != null ?
                new ObjectParameter("SubMenuID", subMenuID) :
                new ObjectParameter("SubMenuID", typeof(string));
    
            var searchFilterParameter = searchFilter != null ?
                new ObjectParameter("SearchFilter", searchFilter) :
                new ObjectParameter("SearchFilter", typeof(string));
    
            var loggedInByParameter = loggedInBy.HasValue ?
                new ObjectParameter("LoggedInBy", loggedInBy) :
                new ObjectParameter("LoggedInBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPermissionReport>("GetUserPermissionReport", mainMenuIDParameter, subMenuIDParameter, searchFilterParameter, loggedInByParameter);
        }
    
        public virtual ObjectResult<GetVendorOrderDueReport> GetVendorOrderDueReport(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string orderType, string searchFilter, Nullable<long> loggedInBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var searchFilterParameter = searchFilter != null ?
                new ObjectParameter("SearchFilter", searchFilter) :
                new ObjectParameter("SearchFilter", typeof(string));
    
            var loggedInByParameter = loggedInBy.HasValue ?
                new ObjectParameter("LoggedInBy", loggedInBy) :
                new ObjectParameter("LoggedInBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorOrderDueReport>("GetVendorOrderDueReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, orderTypeParameter, searchFilterParameter, loggedInByParameter);
        }
    
        public virtual ObjectResult<GetFacilitySuppliesMapReport> GetFacilitySuppliesMapReport(Nullable<long> corporateID, Nullable<long> facilityID, string vendorID, string categoryID, Nullable<long> parlevel, string searchFilter, Nullable<long> loggedInBy)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var parlevelParameter = parlevel.HasValue ?
                new ObjectParameter("Parlevel", parlevel) :
                new ObjectParameter("Parlevel", typeof(long));
    
            var searchFilterParameter = searchFilter != null ?
                new ObjectParameter("SearchFilter", searchFilter) :
                new ObjectParameter("SearchFilter", typeof(string));
    
            var loggedInByParameter = loggedInBy.HasValue ?
                new ObjectParameter("LoggedInBy", loggedInBy) :
                new ObjectParameter("LoggedInBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFacilitySuppliesMapReport>("GetFacilitySuppliesMapReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, categoryIDParameter, parlevelParameter, searchFilterParameter, loggedInByParameter);
        }
    
        public virtual ObjectResult<GetItemDescName> GetItemDescName(string itemDescription)
        {
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDescName>("GetItemDescName", itemDescriptionParameter);
        }
    
        public virtual ObjectResult<GetCategoryReport> GetCategoryReport(string searchItem, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryReport>("GetCategoryReport", searchItemParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetUomReport> GetUomReport(string uomName, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var uomNameParameter = uomName != null ?
                new ObjectParameter("UomName", uomName) :
                new ObjectParameter("UomName", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUomReport>("GetUomReport", uomNameParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetItemDetailsReport> GetItemDetailsReport(Nullable<long> itemID, Nullable<long> loggedinBy, string filter)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemDetailsReport>("GetItemDetailsReport", itemIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetItemSummaryReport> GetItemSummaryReport(string itemCategory, Nullable<long> itemID, string itemDescription, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemSummaryReport>("GetItemSummaryReport", itemCategoryParameter, itemIDParameter, itemDescriptionParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<ValidateMedicalSuppliesOrder> ValidateMedicalSuppliesOrder(Nullable<long> pRMasterID)
        {
            var pRMasterIDParameter = pRMasterID.HasValue ?
                new ObjectParameter("PRMasterID", pRMasterID) :
                new ObjectParameter("PRMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateMedicalSuppliesOrder>("ValidateMedicalSuppliesOrder", pRMasterIDParameter);
        }
    
        public virtual ObjectResult<GetVendorOrderdueRemainderReport> GetVendorOrderdueRemainderReport(string corporateID, string facilityID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string application, Nullable<long> lOGGEDINGBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var lOGGEDINGBYParameter = lOGGEDINGBY.HasValue ?
                new ObjectParameter("LOGGEDINGBY", lOGGEDINGBY) :
                new ObjectParameter("LOGGEDINGBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorOrderdueRemainderReport>("GetVendorOrderdueRemainderReport", corporateIDParameter, facilityIDParameter, dateFromParameter, dateToParameter, applicationParameter, lOGGEDINGBYParameter);
        }
    
        public virtual ObjectResult<GetMachineMasterReport> GetMachineMasterReport(Nullable<long> facilityID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineMasterReport>("GetMachineMasterReport", facilityIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetMachineMasterDetailsReport> GetMachineMasterDetailsReport(Nullable<long> machineID, Nullable<long> loggedinBy, string filter)
        {
            var machineIDParameter = machineID.HasValue ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineMasterDetailsReport>("GetMachineMasterDetailsReport", machineIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindCorporateMasterReport> BindCorporateMasterReport(string searchCorporate, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var searchCorporateParameter = searchCorporate != null ?
                new ObjectParameter("SearchCorporate", searchCorporate) :
                new ObjectParameter("SearchCorporate", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindCorporateMasterReport>("BindCorporateMasterReport", searchCorporateParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindFacilityVendorAccountReport> BindFacilityVendorAccountReport(string facilityID, string vendorID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindFacilityVendorAccountReport>("BindFacilityVendorAccountReport", facilityIDParameter, vendorIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindTransferInReport> BindTransferInReport(Nullable<long> loggedinBy)
        {
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindTransferInReport>("BindTransferInReport", loggedinByParameter);
        }
    
        public virtual ObjectResult<BindTransferOutReport> BindTransferOutReport(Nullable<long> loggedinBy)
        {
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindTransferOutReport>("BindTransferOutReport", loggedinByParameter);
        }
    
        public virtual ObjectResult<BindUserSummaryReport> BindUserSummaryReport(Nullable<long> userID, Nullable<long> loggedinBy, string filter)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindUserSummaryReport>("BindUserSummaryReport", userIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<BindVendorItemMapReport> BindVendorItemMapReport(string vendorID, string categoryID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindVendorItemMapReport>("BindVendorItemMapReport", vendorIDParameter, categoryIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<SearchItemCategory> SearchItemCategory(string searchItem, string isActive, Nullable<long> loggedinBy)
        {
            var searchItemParameter = searchItem != null ?
                new ObjectParameter("SearchItem", searchItem) :
                new ObjectParameter("SearchItem", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchItemCategory>("SearchItemCategory", searchItemParameter, isActiveParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetItemMapping> GetItemMapping(Nullable<long> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemMapping>("GetItemMapping", itemIDParameter);
        }
    
        public virtual ObjectResult<SearchVendorItemMap> SearchVendorItemMap(string vendorID, string categoryID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var categoryIDParameter = categoryID != null ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVendorItemMap>("SearchVendorItemMap", vendorIDParameter, categoryIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<SearchFacilityVendorAcct> SearchFacilityVendorAcct(string facilityID, string vendorID, string isActive, Nullable<long> loggedinBy, string filter)
        {
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchFacilityVendorAcct>("SearchFacilityVendorAcct", facilityIDParameter, vendorIDParameter, isActiveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<SearchUserDetails> SearchUserDetails(string corporateID, string facilityID, string roleID, string userName, string isActicve, Nullable<long> loggedinBy, string filter)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isActicveParameter = isActicve != null ?
                new ObjectParameter("IsActicve", isActicve) :
                new ObjectParameter("IsActicve", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchUserDetails>("SearchUserDetails", corporateIDParameter, facilityIDParameter, roleIDParameter, userNameParameter, isActicveParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int DeleteUserDetails(Nullable<long> userID, Nullable<long> lastModifiedBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserDetails", userIDParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<chkvalidcorporate> chkvalidcorporate(Nullable<long> corporateID, Nullable<long> loggedinBy, string filter)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<chkvalidcorporate>("chkvalidcorporate", corporateIDParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetCategoryByListVendorID> GetCategoryByListVendorID(string listVendorID)
        {
            var listVendorIDParameter = listVendorID != null ?
                new ObjectParameter("ListVendorID", listVendorID) :
                new ObjectParameter("ListVendorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategoryByListVendorID>("GetCategoryByListVendorID", listVendorIDParameter);
        }
    
        public virtual ObjectResult<SearchCapitalReceivingSummaryReport> SearchCapitalReceivingSummaryReport(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCapitalReceivingSummaryReport>("SearchCapitalReceivingSummaryReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchITReceivingSummaryReport> SearchITReceivingSummaryReport(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchITReceivingSummaryReport>("SearchITReceivingSummaryReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<SearchMachinePartsReceiveSummaryReport> SearchMachinePartsReceiveSummaryReport(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> lOGGEDINBY)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var lOGGEDINBYParameter = lOGGEDINBY.HasValue ?
                new ObjectParameter("LOGGEDINBY", lOGGEDINBY) :
                new ObjectParameter("LOGGEDINBY", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMachinePartsReceiveSummaryReport>("SearchMachinePartsReceiveSummaryReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, lOGGEDINBYParameter);
        }
    
        public virtual ObjectResult<SearchMedicalSuppliesReceivingSummaryReport> SearchMedicalSuppliesReceivingSummaryReport(string corporateID, string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string status, Nullable<long> loggedinBy)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMedicalSuppliesReceivingSummaryReport>("SearchMedicalSuppliesReceivingSummaryReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, statusParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<ValidFaciliityAccountCode> ValidFaciliityAccountCode(string faciliityAccountCode)
        {
            var faciliityAccountCodeParameter = faciliityAccountCode != null ?
                new ObjectParameter("FaciliityAccountCode", faciliityAccountCode) :
                new ObjectParameter("FaciliityAccountCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidFaciliityAccountCode>("ValidFaciliityAccountCode", faciliityAccountCodeParameter);
        }
    
        public virtual ObjectResult<CheckVendorOrderDue> CheckVendorOrderDue(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckVendorOrderDue>("CheckVendorOrderDue", corporateIDParameter, facilityIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<SearchVendorOrderType> SearchVendorOrderType(string facilityID, string vendorID, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string filter, Nullable<long> loggedinBy)
        {
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchVendorOrderType>("SearchVendorOrderType", facilityIDParameter, vendorIDParameter, dateFromParameter, dateToParameter, filterParameter, loggedinByParameter);
        }
    
        public virtual ObjectResult<GetVendorOrderDue> GetVendorOrderDue(Nullable<long> venOrderDueID, Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<int> orderType, Nullable<System.DateTime> orderdueDate, Nullable<System.DateTime> deliveryDate, Nullable<long> deliveryWindow, Nullable<long> daysToNotify)
        {
            var venOrderDueIDParameter = venOrderDueID.HasValue ?
                new ObjectParameter("VenOrderDueID", venOrderDueID) :
                new ObjectParameter("VenOrderDueID", typeof(long));
    
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            var orderdueDateParameter = orderdueDate.HasValue ?
                new ObjectParameter("OrderdueDate", orderdueDate) :
                new ObjectParameter("OrderdueDate", typeof(System.DateTime));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var deliveryWindowParameter = deliveryWindow.HasValue ?
                new ObjectParameter("DeliveryWindow", deliveryWindow) :
                new ObjectParameter("DeliveryWindow", typeof(long));
    
            var daysToNotifyParameter = daysToNotify.HasValue ?
                new ObjectParameter("DaysToNotify", daysToNotify) :
                new ObjectParameter("DaysToNotify", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendorOrderDue>("GetVendorOrderDue", venOrderDueIDParameter, corporateIDParameter, facilityIDParameter, vendorIDParameter, orderTypeParameter, orderdueDateParameter, deliveryDateParameter, deliveryWindowParameter, daysToNotifyParameter);
        }
    
        public virtual ObjectResult<GetItem> GetItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItem>("GetItem");
        }
    
        public virtual ObjectResult<GetVendor> GetVendor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVendor>("GetVendor");
        }
    
        public virtual ObjectResult<GetMonthlyUsageReport> GetMonthlyUsageReport(string corporateID, string facilityID, string vendorID, string itemCategoryID, string itemID, string orderType, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> loggedinBy, string filter)
        {
            var corporateIDParameter = corporateID != null ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(string));
    
            var facilityIDParameter = facilityID != null ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(string));
    
            var vendorIDParameter = vendorID != null ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(string));
    
            var itemCategoryIDParameter = itemCategoryID != null ?
                new ObjectParameter("ItemCategoryID", itemCategoryID) :
                new ObjectParameter("ItemCategoryID", typeof(string));
    
            var itemIDParameter = itemID != null ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(string));
    
            var orderTypeParameter = orderType != null ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var loggedinByParameter = loggedinBy.HasValue ?
                new ObjectParameter("LoggedinBy", loggedinBy) :
                new ObjectParameter("LoggedinBy", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMonthlyUsageReport>("GetMonthlyUsageReport", corporateIDParameter, facilityIDParameter, vendorIDParameter, itemCategoryIDParameter, itemIDParameter, orderTypeParameter, dateFromParameter, dateToParameter, loggedinByParameter, filterParameter);
        }
    
        public virtual int DeleteVendorOrderDue(Nullable<long> corporateID, Nullable<long> facilityID, Nullable<long> vendorID, Nullable<System.DateTime> orderdueDate, Nullable<bool> isActive, Nullable<long> lastModifiedBy)
        {
            var corporateIDParameter = corporateID.HasValue ?
                new ObjectParameter("CorporateID", corporateID) :
                new ObjectParameter("CorporateID", typeof(long));
    
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(long));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(long));
    
            var orderdueDateParameter = orderdueDate.HasValue ?
                new ObjectParameter("OrderdueDate", orderdueDate) :
                new ObjectParameter("OrderdueDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var lastModifiedByParameter = lastModifiedBy.HasValue ?
                new ObjectParameter("LastModifiedBy", lastModifiedBy) :
                new ObjectParameter("LastModifiedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendorOrderDue", corporateIDParameter, facilityIDParameter, vendorIDParameter, orderdueDateParameter, isActiveParameter, lastModifiedByParameter);
        }
    
        public virtual ObjectResult<BindPermissionforUser> BindPermissionforUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BindPermissionforUser>("BindPermissionforUser");
        }
    }
}
