// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.8.2.29599
//    <NameSpace>Inventory.NotificationScheduler</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><IncludeSerializeMethod>True</IncludeSerializeMethod><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>True</AutomaticProperties><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace Inventory.NotificationScheduler
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://tempuri.org/PassportSync.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://tempuri.org/PassportSync.xsd", IsNullable = false)]
    public partial class DBServiceConfig
    {

        public System.String DBServer { get; set; }

        public System.String DBName { get; set; }

        public System.String AdminEmailAddress { get; set; }

        public System.String DBUser { get; set; }

        public System.String DBPassword { get; set; }

        public System.String ErrEmailAddress { get; set; }

        public System.String LastAccessed { get; set; }
        public System.String SMTPServer { get; set; }
        public System.String SMTPSSL { get; set; }
        public System.String SMTPPort { get; set; }
        public System.String SMTPSenderEmail { get; set; }
        public System.String SMTPSenderPwd { get; set; }



        /// <summary>
        /// Serializes current DBServiceConfig object into an XML document
        /// </summary>
        // <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(this.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            xmlSerializer.Serialize(memoryStream, this);
            memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
            System.IO.StreamReader streamReader = new System.IO.StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }

        /// <summary>
        /// Deserializes workflow markup into an DBServiceConfig object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output DBServiceConfig object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DBServiceConfig obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.StringReader stringReader = new System.IO.StringReader(xml);
                System.Xml.XmlTextReader xmlTextReader = new System.Xml.XmlTextReader(stringReader);
                System.Xml.Serialization.XmlSerializer xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(DBServiceConfig));
                obj = ((DBServiceConfig)(xmlSerializer.Deserialize(xmlTextReader)));
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        /// <summary>
        /// Serializes current DBServiceConfig object into file
        /// </summary>
        // <param name="fileName">full path of outupt xml file</param>
        // <param name="exception">output Exception value if failed</param>
        // <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                System.IO.StreamWriter streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        /// <summary>
        /// Deserializes workflow markup from file into an DBServiceConfig object
        /// </summary>
        // <param name="xml">string workflow markup to deserialize</param>
        // <param name="obj">Output DBServiceConfig object</param>
        // <param name="exception">output Exception value if deserialize failed</param>
        // <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DBServiceConfig obj, out System.Exception exception)
        {
            exception = null;
            obj = null;
            try
            {
                System.IO.FileStream file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                System.IO.StreamReader sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString, out obj, out exception);
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
    }
}
